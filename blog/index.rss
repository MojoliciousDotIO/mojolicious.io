<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/</link>
        <atom:link href="https://mojolicious.io/blog/index.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.097</generator>
        <item>
            <title>Announcing Mojolicious 9.0</title>
            <link>https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/</link>
            <guid>https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/</guid>
            <description><![CDATA[
                <p>The Mojolicious Core Team is delighted to announce the release and immediate availability of Mojolicious 9.0, code name &quot;Waffle&quot; ðŸ§‡!</p>

<p>Every major release I think that there can&#39;t be much more to add or change in Mojolicious and then when the next one arrives I reflect on how much has changed since I last thought that.
In 9.0 there&#39;s far too much to discuss each at length, so I&#39;m going to highlight some of my favorites and then include a distilled list of changes since 8.0.</p>

<h2>Perl 5.16 and beyond</h2>

<p>Mojolicious now requires Perl version 5.16. This change gives us useful tools to build Mojolicious including the <code>__SUB__</code> token for building self-referential callbacks without leaking.
We were pleased that the community response since the change a few months ago has been ... well crickets.
This is great news since we do hope to move to Perl 5.20 in the not so distant future so that we can use Perl&#39;s native signatures once that is a sound option for us.
We are already encouraging the use of signatures both in the documentation and in our code generation commands.</p>

<h2>Asynchronous Functionality</h2>

<p>Clearly the highlight of the pre-9.0 development cycle has been the integration of Async/Await.
Thanks to Paul Evans (LeoNerd)&#39;s efforts installing <a href="https://metacpan.org/pod/Future::AsyncAwait">Future::AsyncAwait</a> enables Mojolicious to provide the new keywords <code>async</code> and <code>await</code> to provide the most seamless asynchronous development possible, and which is becoming more and more the standard for asynchronous code in other languages.
Writing a non-blocking endpoint is now as simple as</p>

<pre><code>use Mojolicious::Lite -signatures, -async_await;

# Request HTML titles from two sites non-blocking
get &#39;/&#39; =&gt; async sub ($c) {
  my $mojo_tx    = await $c-&gt;ua-&gt;get_p(&#39;https://mojolicious.org&#39;);
  my $mojo_title = $mojo_tx-&gt;result-&gt;dom-&gt;at(&#39;title&#39;)-&gt;text;
  my $cpan_tx    = await $c-&gt;ua-&gt;get_p(&#39;https://metacpan.org&#39;);
  my $cpan_title = $cpan_tx-&gt;result-&gt;dom-&gt;at(&#39;title&#39;)-&gt;text;

  $c-&gt;render(json =&gt; {mojo =&gt; $mojo_title, cpan =&gt; $cpan_title});
};

app-&gt;start;
</code></pre>

<p>When I teach non-blocking to people I can now tell them to follow a trivial recipe for most non-blocking tasks.
Simply <code>await</code> any function that returns a promise and mark and function that uses <code>await</code> with the <code>async</code> keyword.
Note also that all <code>async</code> functions return promises so <code>await</code> any calls to them.
There are some optimizations you can make at times and top-level <code>await</code> (if you aren&#39;t in a Mojolicious webapp) can be a little strange but to a first approximation that&#39;s all you need to write a non-blocking webapp today!</p>

<p>Speaking of promises (which are at the heart of Async/Await), Mojo::Promise has grown a lot this cycle too, adding <code>all_settled</code>, <code>any</code>, <code>map</code>, <code>timer</code>, and <code>timeout</code> class methods, changing its constructor to be more like the one in JavaScript and to warn when an unhandled rejected promise is destroyed.
The latter can help in development where such cases used to hide errors, now, much like the browser, you can at least find where things are going wrong even if you didn&#39;t wire all your promises to a catch callback like you should.</p>

                    <p><a href="https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/async-await/">async/await</a>
                        <a href="https://mojolicious.io/blog/tag/non-blocking/">non-blocking</a>
                        <a href="https://mojolicious.io/blog/tag/promises/">promises</a>
                        <a href="https://mojolicious.io/blog/tag/documentation/">documentation</a>
                        <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                        <a href="https://mojolicious.io/blog/tag/routing/">routing</a>
                    </p>

            ]]></description>
            <pubDate>
                Sun, 14 Feb 2021 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Announcing Core async/await</title>
            <link>https://mojolicious.io/blog/2019/12/26/announcing-core-async-await/</link>
            <guid>https://mojolicious.io/blog/2019/12/26/announcing-core-async-await/</guid>
            <description><![CDATA[
                <p>For years one of my primary tasks as a Mojolicious Core Team member has been to teach Mojolicious users the ins and outs of asynchronous programming.
We have championed several patterns to tame the beast and clean up async code, including continuation passing, promises and now async/await.
But while promises were a noted improvement over continuation passing, it is becoming more and more clear that the async/await pattern is a paradigm shift in asynchronous programming semantics.</p>

<p>I personally believe that it is far and away the easiest way to do nonblocking code in modern languages.
It might even reach the extent that languages and/or frameworks that do not support it are going to be in real trouble as new user will expect it to be available.
With <a href="https://en.wikipedia.org/wiki/Async/await">so many different languages</a> adopting the pattern, soon many may not have even been exposed to &quot;the old ways&quot; at all!</p>

<p>Last year, during the 2018 Mojolicious Advent Calendar, I <a href="https://mojolicious.io/blog/2018/12/24/async-await-the-mojo-way/">introduced</a> my <a href="https://metacpan.org/pod/Mojo::AsyncAwait">Mojo::AsyncAwait</a> library which was intended to address the immediate need for the Mojolicious community, based on the Mojolicious core promise module <a href="https://mojolicious.org/perldoc/Mojo/Promise">Mojo::Promise</a>.
It did rely on a &quot;controversial&quot; module (<a href="https://metacpan.org/pod/Coro">Coro</a>) to accomplish its task, and therefore it was not a good candidate for all users.</p>

<p>Meanwhile, others in the Perl community were noticing as well.
Paul Evans (LeoNerd) applied for and received <a href="https://news.perlfoundation.org/post/grant_proposal_futureasyncawai">a grant</a> from The Perl Foundation to build a low-level async/await mechanism for his <a href="https://metacpan.org/pod/Future">Future</a> promise library.
As that project has successfully culminated in <a href="https://metacpan.org/pod/Future::AsyncAwait">Future::AsyncAwait</a> on CPAN, the Mojolicious team has been engaging with Paul on a collaboration to allow Mojo::Promise to hook directly into it.</p>

<p>So without futher ado, the Mojolicious Core Team is very happy to announce that as of the most recent release of Mojolicious, async/await is now a built-in framework feature!</p>

                    <p><a href="https://mojolicious.io/blog/2019/12/26/announcing-core-async-await/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/async-await/">async/await</a>
                        <a href="https://mojolicious.io/blog/tag/non-blocking/">non-blocking</a>
                        <a href="https://mojolicious.io/blog/tag/promises/">promises</a>
                    </p>

            ]]></description>
            <pubDate>
                Thu, 26 Dec 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Named Content Blocks</title>
            <link>https://mojolicious.io/blog/2019/07/08/named-content-blocks/</link>
            <guid>https://mojolicious.io/blog/2019/07/08/named-content-blocks/</guid>
            <description><![CDATA[
                <p><a href="https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/">Last week I went over how to configure and include
templates</a>. This
is a pretty standard procedural solution: My current template calls
another template. But what if I need to pass additional data to my
layout template? Perhaps in addition to the content in my template,
I also have some <code>&lt;meta&gt;</code> or <code>&lt;script&gt;</code> tags to include, or some
<code>&lt;style&gt;</code> specific to this page. This would involve somehow passing data
&quot;up&quot;, or making the data available for the layout template to use.
<a href="http://mojolicious.org">Mojolicious</a> provides a way to do this: <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-blocks">named
content
blocks</a>.</p>

                    <p><a href="https://mojolicious.io/blog/2019/07/08/named-content-blocks/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                        <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 08 Jul 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>A Reusable View Layer</title>
            <link>https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/</link>
            <guid>https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/</guid>
            <description><![CDATA[
                <p>In a well-designed
<a href="https://en.wikipedia.org/wiki/Modelâ€“viewâ€“controller">Model-View-Controller</a>
web application, most of the code and the development time will be in
the model layer (which contains the <a href="https://en.wikipedia.org/wiki/Business_logic">business
logic</a>). The other two
layers are meant to be as re-usable as possible. Earlier this year
I discussed how to build a <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/">reusable controller for
Mojolicious</a>
and how to <a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/">build an inheritable controller to increase code
re-use</a>.
Now, I&#39;d like to talk about how the <a href="https://mojolicious.org">Mojolicious web
framework</a> provides ways to reuse, combine, and
compose the view code: <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Tutorial#Stash-and-templates">the
stash</a>,
<a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Partial-templates">includes</a>,
<a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Layouts">layout
templates</a>,
and <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-blocks">named content
blocks</a>.</p>

<p>This week, I&#39;ll talk about how to make reusable, configurable,
composable templates.</p>

                    <p><a href="https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                        <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 01 Jul 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Yancy&#39;s Static Backend</title>
            <link>https://mojolicious.io/blog/2019/06/02/yancys-static-backend/</link>
            <guid>https://mojolicious.io/blog/2019/06/02/yancys-static-backend/</guid>
            <description><![CDATA[
                <p>Back a few months ago I wrote about <a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/">making a website for the Yancy
CMS</a> that
included a basic Markdown page editor, <a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/">adding a documentation viewer
with the Mojolicious PODViewer
plugin</a>, and
<a href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/">deploying a static version of the site using the Mojolicious <code>export</code>
command</a>.
The site uses a SQLite database, which makes it very easy to set up and
use the Yancy editor, but very difficult to work with the data any other
way...</p>

<p>To solve this problem, many people have taken to writing their website
as a set of static files and using a static site generator to add
templates and plugins to build their website. Each page has a header
section that defines some metadata about the page, like the title or the
date it was posted. Instead of having each page be a row in a SQLite
database, each page in a static site is a file on the filesystem!</p>

<p>Yancy uses &quot;Backends&quot; to interface with a database. To make Yancy into
a static site generator, I wrote a backend that works with a flat-file
database made up of YAML and Markdown files:
<a href="https://metacpan.org/pod/Yancy::Backend::Static">Yancy::Backend::Static</a>.
I can use this new backend to make my Yancy documentation site even
easier to edit!</p>

                    <p><a href="https://mojolicious.io/blog/2019/06/02/yancys-static-backend/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                    </p>

            ]]></description>
            <pubDate>
                Sun, 02 Jun 2019 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

