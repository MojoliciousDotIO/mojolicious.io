<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/development/</id>
    <title>mojolicious.io</title>
    <updated>2019-04-15T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/development.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/development/" rel="alternate" />
    <generator version="0.098">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/</id>
        <title>Testing Environment With Tmux</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The <a href="http://preaction.me/yancy">Yancy CMS</a> for the <a href="http://mojolicious.org">Mojolicious web
framework</a> currently supports three different
database systems directly (and even more through <a href="http://dbix-class.org">the DBIx::Class
ORM</a>). As a result, when doing development,
I need to have two database daemons running locally, a bunch of
different environment variables to tell the tests where those databases
are, and a web daemon to test the front-end.</p>

<p>Setting up these daemons is a pain, but I also do not want to run them
all the time (to save on my laptop&#39;s battery). To me, it&#39;s easier to run
a database daemon for a specific project than to try to manage all the
databases I might need. But that means that every time I want to do some
work on Yancy, I need to start up a bunch of things.</p>

<p>Since I do all my development in a terminal window, <a href="http://tmux.github.io">the Tmux terminal
multiplexer</a> has become an extremely useful tool.
Using a shell script and Tmux, I can run a single command to set up all
the databases, environment variables, and all the tabs I need to get to
work quickly.</p>

                <p><a href="https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/testing/">testing</a>
                    <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                </p>

        ]]></content>
        <updated>2019-04-15T00:00:00Z</updated>
        <category term="development" />
        <category term="testing" />
        <category term="yancy" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/</id>
        <title>Reverse Proxy With Path</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>It&#39;s extremely common for a <a href="http://mojolicious.org">Mojolicious</a> web
application to be hosted behind some kind of HTTP proxy: A production website
usually includes <a href="https://varnish-cache.org">Varnish</a>, or
<a href="https://www.nginx.com">Nginx</a>, or a CDN (probably using Varnish or Nginx).</p>

<p>In the most common case, a web application is the entire domain, so configuring
the reverse proxy is very simple: Add the <code>-p</code> option to
<a href="https://mojolicious.org/perldoc/hypnotoad"><code>hypnotoad</code></a> or <a href="https://mojolicious.org/perldoc/Mojolicious/Command/daemon"><code>myapp.pl
daemon</code></a> command,
or set the <code>MOJO_REVERSE_PROXY</code> environment variable to a true value. <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook">See the
Mojolicious Cookbook for more
details</a>.</p>

<p>But what if my application doesn&#39;t have its own domain? How do I host a
Mojolicious application as a reverse proxy from a path in another domain?</p>

                <p><a href="https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                </p>

        ]]></content>
        <updated>2019-03-18T00:00:00Z</updated>
        <category term="deployment" />
        <category term="development" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/</id>
        <title>Mojolicious and DBIx::Class</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://mojolicious.org">Mojolicious</a> is an <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Growing#Model-View-Controller">MVC
framework</a>.
But, unlike <a href="http://www.catalystframework.org">Catalyst</a>, Mojolicious
does not provide a model API. This is a good thing: Mojolicious works
well with any model layer, including the existing models used by your
current application.</p>

<p><a href="https://metacpan.org/pod/DBIx::Class">DBIx::Class</a> is a popular model
layer for Mojolicious applications. DBIx::Class (or &quot;DBIC&quot;) is an
<a href="https://en.wikipedia.org/wiki/Object-relational_mapping">Object-Relational Mapper
(ORM)</a> to map
objects onto a relational database. This allows for a well-organized
model layer, and a standard API to access the data.</p>

<p>For those who read last month&#39;s posts on <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/">Writing Reusable
Controllers</a> and
<a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/">Writing Extensible
Controllers</a>, this
post introduces the end result of those posts: The <a href="http://metacpan.org/pod/Mojolicious::Plugin::DBIC">Mojolicious DBIC
Plugin</a>. This plugin
makes it easier to start using DBIx::Class with Mojolicious.</p>

                <p><a href="https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/controller/">controller</a>
                    <a href="https://mojolicious.io/blog/tag/dbix-class/">DBIx::Class</a>
                </p>

        ]]></content>
        <updated>2019-02-18T00:00:00Z</updated>
        <category term="development" />
        <category term="controller" />
        <category term="DBIx::Class" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/</id>
        <title>Writing Extensible Controllers</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Once I have a <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers">reusable
controller</a>, how do
I extend it? Object-oriented programming gives me a couple ways of
extending a controller through code: Inheritance and composition. But,
we need to write our controller so that it&#39;s easy to inherit or compose.</p>

<h1>Don&#39;t Render, Stash</h1>

<p>First, this means we shouldn&#39;t call <a href="https://mojolicious.org/perldoc/Mojolicious/Controller#render">the <code>render</code>
method</a>
ourselves (unless we have a good reason, but we&#39;ll get to that later).
The <code>render</code> method can only ever be called once, so we should only call
it after we&#39;ve gathered all the data we want.</p>

<pre><code># This method cannot easily be used by a subclass, since it explicitly
# calls render()
sub list {
    my ( $c ) = @_;
    my $resultset_class = $c-&gt;stash( &#39;resultset&#39; );
    my $resultset = $c-&gt;schema-&gt;resultset( $resultset_class );
    $c-&gt;render(
        resultset =&gt; $resultset,
    );
}
</code></pre>

<p>So, to make sure I don&#39;t call <code>render</code> too early, and to make sure
subclasses can use the data from my superclass, I instead put all the
data directly in to the stash with the <a href="https://mojolicious.org/perldoc/Mojolicious/Controller#stash"><code>stash()</code>
method</a>.</p>

                <p><a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/controller/">controller</a>
                    <a href="https://mojolicious.io/blog/tag/dbix-class/">DBIx::Class</a>
                </p>

        ]]></content>
        <updated>2019-01-28T00:00:00Z</updated>
        <category term="development" />
        <category term="controller" />
        <category term="DBIx::Class" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/</id>
        <title>Writing Reusable Controllers</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>In all the web applications I&#39;ve written with
<a href="http://mojolicious.org">Mojolicious</a>, one of the most mis-used features
are controllers. Mojolicious is
a <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Growing#Model-View-Controller">Model-View-Controller</a>
framework, and the MVC pattern is intended to provide for code re-use.</p>

<p>Models can be interchangeable and used by the same controllers and
templates. With a common, consistent model API, the right controller can
list any data, update any data. If all of our models have a method named
&quot;search&quot;, I can make a single controller method that will run a search
on any of them.</p>

<p>The easiest way to demonstrate this is with
<a href="http://metacpan.org/pod/DBIx::Class">DBIx::Class</a>. DBIx::Class provides
a consistent API for a relational database. </p>

<h2>The Problem</h2>

<p>For this example, I&#39;ll use <a href="https://github.com/preaction/Mojolicious-Plugin-DBIC/tree/master/t/lib/Local">this DBIx::Class
schema</a>.
My schema has a couple tables: <code>notes</code> for storing simple notes, and
<code>events</code> for storing calendar events.</p>

                <p><a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/controller/">controller</a>
                    <a href="https://mojolicious.io/blog/tag/dbix-class/">DBIx::Class</a>
                </p>

        ]]></content>
        <updated>2019-01-21T00:00:00Z</updated>
        <category term="development" />
        <category term="controller" />
        <category term="DBIx::Class" />
    </entry>
</feed>

