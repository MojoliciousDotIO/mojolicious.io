<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/tag/yancy/</link>
        <atom:link href="https://mojolicious.io/blog/tag/yancy.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.098</generator>
        <item>
            <title>Yancy&#39;s Static Backend</title>
            <link>https://mojolicious.io/blog/2019/06/02/yancys-static-backend/</link>
            <guid>https://mojolicious.io/blog/2019/06/02/yancys-static-backend/</guid>
            <description><![CDATA[
                <p>Back a few months ago I wrote about <a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/">making a website for the Yancy
CMS</a> that
included a basic Markdown page editor, <a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/">adding a documentation viewer
with the Mojolicious PODViewer
plugin</a>, and
<a href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/">deploying a static version of the site using the Mojolicious <code>export</code>
command</a>.
The site uses a SQLite database, which makes it very easy to set up and
use the Yancy editor, but very difficult to work with the data any other
way...</p>

<p>To solve this problem, many people have taken to writing their website
as a set of static files and using a static site generator to add
templates and plugins to build their website. Each page has a header
section that defines some metadata about the page, like the title or the
date it was posted. Instead of having each page be a row in a SQLite
database, each page in a static site is a file on the filesystem!</p>

<p>Yancy uses &quot;Backends&quot; to interface with a database. To make Yancy into
a static site generator, I wrote a backend that works with a flat-file
database made up of YAML and Markdown files:
<a href="https://metacpan.org/pod/Yancy::Backend::Static">Yancy::Backend::Static</a>.
I can use this new backend to make my Yancy documentation site even
easier to edit!</p>

                    <p><a href="https://mojolicious.io/blog/2019/06/02/yancys-static-backend/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                    </p>

            ]]></description>
            <pubDate>
                Sun, 02 Jun 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Testing Environment With Tmux</title>
            <link>https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/</link>
            <guid>https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/</guid>
            <description><![CDATA[
                <p>The <a href="http://preaction.me/yancy">Yancy CMS</a> for the <a href="http://mojolicious.org">Mojolicious web
framework</a> currently supports three different
database systems directly (and even more through <a href="http://dbix-class.org">the DBIx::Class
ORM</a>). As a result, when doing development,
I need to have two database daemons running locally, a bunch of
different environment variables to tell the tests where those databases
are, and a web daemon to test the front-end.</p>

<p>Setting up these daemons is a pain, but I also do not want to run them
all the time (to save on my laptop&#39;s battery). To me, it&#39;s easier to run
a database daemon for a specific project than to try to manage all the
databases I might need. But that means that every time I want to do some
work on Yancy, I need to start up a bunch of things.</p>

<p>Since I do all my development in a terminal window, <a href="http://tmux.github.io">the Tmux terminal
multiplexer</a> has become an extremely useful tool.
Using a shell script and Tmux, I can run a single command to set up all
the databases, environment variables, and all the tabs I need to get to
work quickly.</p>

                    <p><a href="https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/development/">development</a>
                        <a href="https://mojolicious.io/blog/tag/testing/">testing</a>
                        <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 15 Apr 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 19: You Only Export Twice</title>
            <link>https://mojolicious.io/blog/2018/12/19/you-only-export-twice/</link>
            <guid>https://mojolicious.io/blog/2018/12/19/you-only-export-twice/</guid>
            <description><![CDATA[
                <p>With my Yancy documentation site built, with <a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy">a custom landing
page</a> and <a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod">a POD
viewer</a>, I just need to deploy the site. I
could deploy the site using <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook#Hypnotoad">hypnotoad, Mojolicious&#39;s preforking server with
hot
deployment</a>,
but that would require me to have a server and keep it online. It&#39;d be a lot
better if I could just deploy a <a href="https://pages.github.com">static website to
Github</a> like all the cool people are doing.</p>

<p>But to do that, I&#39;d need to take my dynamic website and turn it into a static
one, and that&#39;s impossible! Or is it? Why am I asking me, when I&#39;m the one who
wrote a way to do it: The <a href="https://metacpan.org/pod/Mojolicious::Command::export">Mojolicious export
command</a>.</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/command/">command</a>
                        <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                    </p>

            ]]></description>
            <pubDate>
                Wed, 19 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 18: A View To A POD</title>
            <link>https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/</link>
            <guid>https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/</guid>
            <description><![CDATA[
                <p>In order for Yancy to have a good documentation site, it needs to
actually render the documentation. To render Perl documentation in
<a href="http://mojolicious.org">Mojolicious</a>, I can use the
<a href="http://metacpan.org/pod/Mojolicious::Plugin::PODViewer">PODViewer</a>
plugin (a fork of the now-deprecated
<a href="http://mojolicious.org/perldoc/Mojolicious/Plugin/PODRenderer">PODRenderer</a>
plugin).</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/documentation/">documentation</a>
                        <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                    </p>

            ]]></description>
            <pubDate>
                Tue, 18 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 17: A Website For Yancy</title>
            <link>https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/</link>
            <guid>https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/</guid>
            <description><![CDATA[
                <p>For this year, I decided that Yancy needed a website. Rather than build
a website with a <a href="http://preaction.me/statocles">static site generator like
Statocles</a>, which is so popular these
days, I decided to do something wild and unpredictable: A dynamic
website! Lucky for me, I have the perfect project to easily build
a dynamic website: Yancy!</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 17 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

