<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/swagger/</id>
    <title>mojolicious.io</title>
    <updated>2018-03-18T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/swagger.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/swagger/" rel="alternate" />
    <generator version="0.098">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2018/03/18/graphql-openapi/</id>
        <title>Mojolicious, OpenAPI - and GraphQL</title>
        <author><name>Ed J</name></author>
        <link href="https://mojolicious.io/blog/2018/03/18/graphql-openapi/" rel="alternate" />
        <content type="html"><![CDATA[
            <h2>How to easily add a GraphQL interface to the public REST API of your Mojolicious application</h2>

<p>During the Mojolicious 2017 Advent calendar series, we looked at <a href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/">how to build a public REST API using Mojolicious</a>. A technology that is getting a lot of buzz is <a href="http://graphql.org/learn/">GraphQL</a>. Now that it has been <a href="https://metacpan.org/pod/GraphQL">ported to Perl 5</a>, what if there were an easy way to let people access your API using it?</p>

                <p><a href="https://mojolicious.io/blog/2018/03/18/graphql-openapi/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    <a href="https://mojolicious.io/blog/tag/openapi/">openapi</a>
                    <a href="https://mojolicious.io/blog/tag/swagger/">swagger</a>
                    <a href="https://mojolicious.io/blog/tag/graphql/">graphql</a>
                </p>

        ]]></content>
        <updated>2018-03-18T00:00:00Z</updated>
        <category term="api" />
        <category term="openapi" />
        <category term="swagger" />
        <category term="graphql" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/</id>
        <title>Day 22: A RESTful API with OpenAPI</title>
        <author><name>Jan Henning Thorsen</name></author>
        <link href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The <a href="https://www.openapis.org/">OpenAPI</a> Specification (formerly named
Swagger) is an API description format for REST APIs. An API specification
written using the the rules set by the Open API Initiative can be used to
describe:</p>

<ul>
<li>All the available endpoints. An endpoint is a unique resource that can
access or modify a given object.</li>
<li>Input parameters, such as headers, query parameters and/or body parameters.</li>
<li>The structure of the response, including headers status codes and the body -
if any.</li>
<li>Authentication methods</li>
<li>Contact information, license, terms of use and other information</li>
</ul>

<p>This post look into how to write an API specification and how to use it
together with
<a href="https://metacpan.org/pod/Mojolicious::Plugin::OpenAPI">Mojolicious::Plugin::OpenAPI</a>
and <a href="https://metacpan.org/pod/OpenAPI::Client">OpenAPI::Client</a>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    <a href="https://mojolicious.io/blog/tag/openapi/">openapi</a>
                    <a href="https://mojolicious.io/blog/tag/rest/">rest</a>
                    <a href="https://mojolicious.io/blog/tag/swagger/">swagger</a>
                </p>

        ]]></content>
        <updated>2017-12-22T00:00:00Z</updated>
        <category term="advent" />
        <category term="api" />
        <category term="openapi" />
        <category term="rest" />
        <category term="swagger" />
    </entry>
</feed>

