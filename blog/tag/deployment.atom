<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/deployment/</id>
    <title>mojolicious.io</title>
    <updated>2021-02-14T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/deployment.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/deployment/" rel="alternate" />
    <generator version="0.097">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/</id>
        <title>Announcing Mojolicious 9.0</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The Mojolicious Core Team is delighted to announce the release and immediate availability of <a href="https://mojolicious.org">Mojolicious</a> 9.0.
Every Mojolicious major release has a <a href="https://docs.mojolicious.org/Mojolicious#CODE-NAMES">code name</a> based on a unicode character and this one is lovingly named &quot;Waffle&quot; ðŸ§‡!</p>

<p>Every major release I think that there can&#39;t be much more to add or change in Mojolicious and then when the next one arrives I reflect on how much has changed since I last thought that.
In <a href="https://metacpan.org/release/SRI/Mojolicious-9.0">9.0</a> there&#39;s far too much to discuss each at length, so I&#39;m going to highlight some of my favorites and then include a distilled list of changes since 8.0.</p>

<h2>Perl 5.16 and beyond</h2>

<p>Mojolicious now requires Perl version 5.16. This change gives us useful tools to build Mojolicious including the <code>__SUB__</code> token for building self-referential callbacks without leaking.
We were pleased that the community response since the change a few months ago has been ... well crickets.
This is great news since we do hope to move to Perl 5.20 in the not so distant future so that we can use Perl&#39;s native signatures once that is a sound option for us.
We are already encouraging the use of signatures both in the documentation and in our code generation commands.</p>

<h2>Asynchronous Functionality</h2>

<p>Clearly the highlight of the pre-9.0 development cycle has been the integration of Async/Await.
Thanks to Paul Evans (LeoNerd)&#39;s efforts installing <a href="https://metacpan.org/pod/Future::AsyncAwait">Future::AsyncAwait</a> enables Mojolicious to provide the new keywords <code>async</code> and <code>await</code> to provide the most seamless asynchronous development possible, and which is becoming more and more the standard for asynchronous code in other languages.
Writing a non-blocking endpoint is now as simple as</p>

<pre><code>use Mojolicious::Lite -signatures, -async_await;

# Request HTML titles from two sites non-blocking
get &#39;/&#39; =&gt; async sub ($c) {
  my $mojo_tx    = await $c-&gt;ua-&gt;get_p(&#39;https://mojolicious.org&#39;);
  my $mojo_title = $mojo_tx-&gt;result-&gt;dom-&gt;at(&#39;title&#39;)-&gt;text;
  my $cpan_tx    = await $c-&gt;ua-&gt;get_p(&#39;https://metacpan.org&#39;);
  my $cpan_title = $cpan_tx-&gt;result-&gt;dom-&gt;at(&#39;title&#39;)-&gt;text;

  $c-&gt;render(json =&gt; {mojo =&gt; $mojo_title, cpan =&gt; $cpan_title});
};

app-&gt;start;
</code></pre>

<p>When I teach non-blocking to people I can now tell them to follow a trivial recipe for most non-blocking tasks.
Simply <code>await</code> any function that returns a promise and mark and function that uses <code>await</code> with the <code>async</code> keyword.
Note also that all <code>async</code> functions return promises so <code>await</code> any calls to them.
There are some optimizations you can make at times and top-level <code>await</code> (if you aren&#39;t in a Mojolicious webapp) can be a little strange but to a first approximation that&#39;s all you need to write a non-blocking webapp today!</p>

<p>Speaking of promises (which are at the heart of Async/Await), Mojo::Promise has grown a lot this cycle too, adding <code>all_settled</code>, <code>any</code>, <code>map</code>, <code>timer</code>, and <code>timeout</code> class methods, changing its constructor to be more like the one in JavaScript and to warn when an unhandled rejected promise is destroyed.
The latter can help in development where such cases used to hide errors, now, much like the browser, you can at least find where things are going wrong even if you didn&#39;t wire all your promises to a catch callback like you should.</p>

                <p><a href="https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/async-await/">async/await</a>
                    <a href="https://mojolicious.io/blog/tag/non-blocking/">non-blocking</a>
                    <a href="https://mojolicious.io/blog/tag/promises/">promises</a>
                    <a href="https://mojolicious.io/blog/tag/documentation/">documentation</a>
                    <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                    <a href="https://mojolicious.io/blog/tag/routing/">routing</a>
                </p>

        ]]></content>
        <updated>2021-02-14T00:00:00Z</updated>
        <category term="async/await" />
        <category term="non-blocking" />
        <category term="promises" />
        <category term="documentation" />
        <category term="deployment" />
        <category term="routing" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/</id>
        <title>Reverse Proxy With Path</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>It&#39;s extremely common for a <a href="http://mojolicious.org">Mojolicious</a> web
application to be hosted behind some kind of HTTP proxy: A production website
usually includes <a href="https://varnish-cache.org">Varnish</a>, or
<a href="https://www.nginx.com">Nginx</a>, or a CDN (probably using Varnish or Nginx).</p>

<p>In the most common case, a web application is the entire domain, so configuring
the reverse proxy is very simple: Add the <code>-p</code> option to
<a href="https://mojolicious.org/perldoc/hypnotoad"><code>hypnotoad</code></a> or <a href="https://mojolicious.org/perldoc/Mojolicious/Command/daemon"><code>myapp.pl
daemon</code></a> command,
or set the <code>MOJO_REVERSE_PROXY</code> environment variable to a true value. <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook">See the
Mojolicious Cookbook for more
details</a>.</p>

<p>But what if my application doesn&#39;t have its own domain? How do I host a
Mojolicious application as a reverse proxy from a path in another domain?</p>

                <p><a href="https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                </p>

        ]]></content>
        <updated>2019-03-18T00:00:00Z</updated>
        <category term="deployment" />
        <category term="development" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/22/use-carton-for-your-mojolicious-app-deployment/</id>
        <title>Day 22: Use Carton for your Mojolicious app deployment</title>
        <author><name>Luc Didry</name></author>
        <link href="https://mojolicious.io/blog/2018/12/22/use-carton-for-your-mojolicious-app-deployment/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>You have a lovely Mojolicious app, itâ€™s time to deploy it!</p>

<p>Butâ€¦ itâ€™s not working on the production server! What is going on? Oh no, the modules you rely on are not on the same version that on your development server. What can you do?</p>

                <p><a href="https://mojolicious.io/blog/2018/12/22/use-carton-for-your-mojolicious-app-deployment/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                    <a href="https://mojolicious.io/blog/tag/carton/">carton</a>
                </p>

        ]]></content>
        <updated>2018-12-22T00:00:00Z</updated>
        <category term="advent" />
        <category term="deployment" />
        <category term="carton" />
    </entry>
</feed>

