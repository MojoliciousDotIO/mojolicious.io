<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/tag/routing/</link>
        <atom:link href="https://mojolicious.io/blog/tag/routing.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.097</generator>
        <item>
            <title>Announcing Mojolicious 9.0</title>
            <link>https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/</link>
            <guid>https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/</guid>
            <description><![CDATA[
                <p>The Mojolicious Core Team is delighted to announce the release and immediate availability of version 9.0 of the <a href="https://mojolicious.org">Mojolicious</a> real-time web framework.
Every Mojolicious major release has a <a href="https://docs.mojolicious.org/Mojolicious#CODE-NAMES">code name</a> based on a unicode character and this one is lovingly named &quot;Waffle&quot; ðŸ§‡!</p>

<p>Every major release I think that there can&#39;t be much more to add or change in Mojolicious and then when the next one arrives I reflect on how much has changed since I last thought that.
In <a href="https://metacpan.org/release/SRI/Mojolicious-9.0">9.0</a> there&#39;s far too much to discuss each at length, so I&#39;m going to highlight some of my favorites and then include a distilled list of changes since 8.0.</p>

<h2>Perl 5.16 and beyond</h2>

<p>Mojolicious now requires Perl version 5.16. This change gives us useful tools to build Mojolicious including the <code>__SUB__</code> token for building self-referential callbacks without leaking.
We were pleased that the community response since the change a few months ago has been ... well crickets.
This is great news since we do hope to move to Perl 5.20 in the not so distant future so that we can use Perl&#39;s native signatures once that is a sound option for us.
We are already encouraging the use of signatures both in the documentation and in our code generation commands.</p>

<h2>Asynchronous Functionality</h2>

<p>Clearly the highlight of the pre-9.0 development cycle has been the integration of Async/Await.
Thanks to Paul Evans (LeoNerd)&#39;s efforts, when you have <a href="https://metacpan.org/pod/Future::AsyncAwait">Future::AsyncAwait</a> installed Mojolicious can use its new keywords <code>async</code> and <code>await</code> to provide the most seamless asynchronous development possible, something that is becoming more and more the standard for asynchronous code in other languages.
Writing a non-blocking endpoint is now as simple as</p>

<pre><code>use Mojolicious::Lite -signatures, -async_await;

# Request HTML titles from two sites non-blocking
get &#39;/&#39; =&gt; async sub ($c) {
  my $mojo_tx    = await $c-&gt;ua-&gt;get_p(&#39;https://mojolicious.org&#39;);
  my $mojo_title = $mojo_tx-&gt;result-&gt;dom-&gt;at(&#39;title&#39;)-&gt;text;
  my $cpan_tx    = await $c-&gt;ua-&gt;get_p(&#39;https://metacpan.org&#39;);
  my $cpan_title = $cpan_tx-&gt;result-&gt;dom-&gt;at(&#39;title&#39;)-&gt;text;

  $c-&gt;render(json =&gt; {mojo =&gt; $mojo_title, cpan =&gt; $cpan_title});
};

app-&gt;start;
</code></pre>

<p>When I teach non-blocking to people I can now tell them to follow a trivial recipe for most non-blocking tasks.
Simply <code>await</code> any function that returns a promise and mark any function that uses <code>await</code> with the <code>async</code> keyword.
Note also that all <code>async</code> functions return promises so <code>await</code> any calls to them.
There are some optimizations you can make at times and top-level <code>await</code> (if you aren&#39;t in a Mojolicious webapp) can be a little strange but to a first approximation that&#39;s all you need to write a non-blocking webapp today!</p>

<p>Speaking of promises (which are at the heart of Async/Await), Mojo::Promise has grown a lot this cycle too, adding <code>all_settled</code>, <code>any</code>, <code>map</code>, <code>timer</code>, and <code>timeout</code> class methods, changing its constructor to be more like the one in JavaScript and to warn when an unhandled rejected promise is destroyed.
The latter can help in development where such cases used to hide errors, now, much like the browser, you can at least find where things are going wrong even if you didn&#39;t wire all your promises to a catch callback like you should.</p>

                    <p><a href="https://mojolicious.io/blog/2021/02/14/announcing-mojolicious-9-0/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/async-await/">async/await</a>
                        <a href="https://mojolicious.io/blog/tag/non-blocking/">non-blocking</a>
                        <a href="https://mojolicious.io/blog/tag/promises/">promises</a>
                        <a href="https://mojolicious.io/blog/tag/documentation/">documentation</a>
                        <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                        <a href="https://mojolicious.io/blog/tag/routing/">routing</a>
                    </p>

            ]]></description>
            <pubDate>
                Sun, 14 Feb 2021 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 3: Using Named Routes</title>
            <link>https://mojolicious.io/blog/2017/12/03/day-3-using-named-routes/</link>
            <guid>https://mojolicious.io/blog/2017/12/03/day-3-using-named-routes/</guid>
            <description><![CDATA[
                <p>One of the things we know from years of programming is that you should never hard-code anything if you don&#39;t have to.
And yet far too many web application hard-code their urls, especially internal ones.
But what if you didn&#39;t have to?</p>

<p>Each Mojolicious route has its own <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Routing#Named-routes">name</a> which can be used to generate urls.
If you don&#39;t specify one, one is generated, but you shouldn&#39;t rely on that name, give it one that is meaningful and relevant to your purposes.
In lite apps, the name is the last parameter, after any defaults or callbacks.
(In a full app it is an attribute, but we&#39;ll talk about those in another post).</p>

<p>Then when you need a url, rather than hard-coding it, use <a href="http://mojolicious.org/perldoc/Mojolicious/Controller#url_for"><code>url_for</code></a> or related functionality to generate a url by name, you can even pass placeholder values if needed.
Let&#39;s see how it works!</p>

                    <p><a href="https://mojolicious.io/blog/2017/12/03/day-3-using-named-routes/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/lite/">lite</a>
                        <a href="https://mojolicious.io/blog/tag/routing/">routing</a>
                    </p>

            ]]></description>
            <pubDate>
                Sun, 03 Dec 2017 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

