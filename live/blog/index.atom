<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/</id>
    <title>mojolicious.io</title>
    <updated>2018-03-18T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/index.atom" rel="self" />
    <link href="https://mojolicious.io/blog/" rel="alternate" />
    <generator version="0.088">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2018/03/18/graphql-openapi/</id>
        <title>Mojolicious, OpenAPI - and GraphQL</title>
        <author><name>Ed J</name></author>
        <link href="https://mojolicious.io/blog/2018/03/18/graphql-openapi/" rel="alternate" />
        <content type="html"><![CDATA[
            <h2>How to easily add a GraphQL interface to the public REST API of your Mojolicious application</h2>

<p>During the Mojolicious 2017 Advent calendar series, we looked at <a href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/">how to build a public REST API using Mojolicious</a>. A technology that is getting a lot of buzz is <a href="http://graphql.org/learn/">GraphQL</a>. Now that it has been <a href="https://metacpan.org/pod/GraphQL">ported to Perl 5</a>, what if there were an easy way to let people access your API using it?</p>

                <p><a href="https://mojolicious.io/blog/2018/03/18/graphql-openapi/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    <a href="https://mojolicious.io/blog/tag/openapi/">openapi</a>
                    <a href="https://mojolicious.io/blog/tag/swagger/">swagger</a>
                    <a href="https://mojolicious.io/blog/tag/graphql/">graphql</a>
                </p>

        ]]></content>
        <updated>2018-03-18T00:00:00Z</updated>
        <category term="api" />
        <category term="openapi" />
        <category term="swagger" />
        <category term="graphql" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/24/day-24-release-and-wrap-up/</id>
        <title>Day 24: Release and Wrap-Up</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/24/day-24-release-and-wrap-up/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Over the course of this advent calendar, we have discussed the <a href="https://mojolicious.io/blog/tag/wishlist/">Wishlist example application</a> several times.
We used it to motivate discussions about <a href="https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/">templates</a>, <a href="https://mojolicious.io/blog/2017/12/18/day-18-the-wishlist-model/">models</a>, <a href="https://mojolicious.io/blog/2017/12/19/day-19-make-your-app-installable/">installable apps</a>, and <a href="https://mojolicious.io/blog/2017/12/20/day-20-practical-testing/">testing</a>.
In this post I want to use it somewhat differently.
I would like to motivate you, the reader, into action in a few different ways.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/24/day-24-release-and-wrap-up/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/wishlist/">wishlist</a>
                </p>

        ]]></content>
        <updated>2017-12-24T00:00:00Z</updated>
        <category term="advent" />
        <category term="wishlist" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/23/day-23-one-liners-for-fun-and-profit/</id>
        <title>Day 23: One-Liners for Fun and Profit</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/23/day-23-one-liners-for-fun-and-profit/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Perl is well-known for its <a href="http://www.catonmat.net/download/perl1line.txt">one-liners</a>: short programs written as part of the <a href="http://perldoc.perl.org/perlrun.html">command line invocation of the interpreter</a>.
Certainly every programmer or sysadmin has the need, from time to time, to do a quick one-off task programmatically.
Such tasks can be done with a full script, to be sure, but once you get the hang of writing them, one-liners can save the time and hassle of actually doing so.</p>

<p>These tasks may include removing unwanted lines from files, collecting data from logs, or even a quick proof-of-concept of something that would become a script later.
They can read lines in files, even multiple files, can operate on files in-place, can read from STDIN as a pipe.
But while one-liners have been tools of the trade for these activities, certainly no such thing would be practical for web tasks, right?</p>

<p>But of course, on <a href="https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands/">day 5</a> and <a href="https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/">day 6</a> of this series that we saw that we can build command line tools with your app.
We have even seen how to use the <a href="http://mojolicious.org/perldoc/Mojolicious/Command/eval">eval</a> command to run a one-liner against your app.
So could we take this further?</p>

<p>Could we do remote data fetching and manipulation as a one-liner?
Could we build an entire web application as a one-liner?
Would I be asking if the answer was no?</p>

                <p><a href="https://mojolicious.io/blog/2017/12/23/day-23-one-liners-for-fun-and-profit/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/command/">command</a>
                    <a href="https://mojolicious.io/blog/tag/debugging/">debugging</a>
                    <a href="https://mojolicious.io/blog/tag/lite/">lite</a>
                </p>

        ]]></content>
        <updated>2017-12-23T00:00:00Z</updated>
        <category term="advent" />
        <category term="command" />
        <category term="debugging" />
        <category term="lite" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/</id>
        <title>Day 22: A RESTful API with OpenAPI</title>
        <author><name>Jan Henning Thorsen</name></author>
        <link href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The <a href="https://www.openapis.org/">OpenAPI</a> Specification (formerly named
Swagger) is an API description format for REST APIs. An API specification
written using the the rules set by the Open API Initiative can be used to
describe:</p>

<ul>
<li>All the available endpoints. An endpoint is a unique resource that can
access or modify a given object.</li>
<li>Input parameters, such as headers, query parameters and/or body parameters.</li>
<li>The structure of the response, including headers status codes and the body -
if any.</li>
<li>Authentication methods</li>
<li>Contact information, license, terms of use and other information</li>
</ul>

<p>This post look into how to write an API specification and how to use it
together with
<a href="https://metacpan.org/pod/Mojolicious::Plugin::OpenAPI">Mojolicious::Plugin::OpenAPI</a>
and <a href="https://metacpan.org/pod/OpenAPI::Client">OpenAPI::Client</a>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    <a href="https://mojolicious.io/blog/tag/openapi/">openapi</a>
                    <a href="https://mojolicious.io/blog/tag/rest/">rest</a>
                    <a href="https://mojolicious.io/blog/tag/swagger/">swagger</a>
                </p>

        ]]></content>
        <updated>2017-12-22T00:00:00Z</updated>
        <category term="advent" />
        <category term="api" />
        <category term="openapi" />
        <category term="rest" />
        <category term="swagger" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/21/day-21-virtually-a-lumberjack/</id>
        <title>Day 21: Virtual(ly a) Lumberjack</title>
        <author><name>CandyAngel</name></author>
        <link href="https://mojolicious.io/blog/2017/12/21/day-21-virtually-a-lumberjack/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>What do you do when you want to split up a stream of data in real-time while
giving the user instructions?</p>

<p>This is just what I wanted to do to aid in reverse-engineering the USB
protocol of Virtual Reality devices known as Head Mounted Displays (HMD), for
the <a href="http://www.openhmd.net/">OpenHMD</a> project.</p>

<p>HMDs are used to create virtual reality environments. When worn, two slightly
different images are drawn to each side of the screen, with each side visible
to only one eye. This imitates binocular vision and creates an image with a
feeling of depth. By tracking the rotation of the unit, the user can then look
around this environment.</p>

<p>The recent resurgence of Virtual Reality devices can be attributed to the Rift
DK1, released by Oculus in March 2013.</p>

<p>By logging the packets generated during each movement, we can compare the
content of each log to identify which bytes are related to which action. Such
movements include roll (tilting head side-to-side), pitch (looking up and
down) and yaw (turning left/right). Though position isn&#39;t tracked, we also
look for sway (left-right translation), surge (back and forth) and heave (up
and down) information as this is used in combination with the other values for
accurate tracking of rotation.</p>

<p>Mojo is an amazing toolkit for web development, as shown in previous
calendar entries, but using components of it can also solve problems in other
non-web spaces like these. Why use Mojo for this? Because it makes it <em>easy</em>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/21/day-21-virtually-a-lumberjack/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/non-web/">non-web</a>
                </p>

        ]]></content>
        <updated>2017-12-21T00:00:00Z</updated>
        <category term="advent" />
        <category term="non-web" />
    </entry>
</feed>

