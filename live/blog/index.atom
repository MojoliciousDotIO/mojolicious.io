<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/</id>
    <title>mojolicious.io</title>
    <updated>2019-07-01T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/index.atom" rel="self" />
    <link href="https://mojolicious.io/blog/" rel="alternate" />
    <generator version="0.093">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/</id>
        <title>A Reusable View Layer</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>In a well-designed
<a href="https://en.wikipedia.org/wiki/Model–view–controller">Model-View-Controller</a>
web application, most of the code and the development time will be in
the model layer (which contains the <a href="https://en.wikipedia.org/wiki/Business_logic">business
logic</a>). The other two
layers are meant to be as re-usable as possible. Earlier this year
I discussed how to build a <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/">reusable controller for
Mojolicious</a>
and how to <a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/">build an inheritable controller to increase code
re-use</a>.
Now, I&#39;d like to talk about how the <a href="https://mojolicious.org">Mojolicious web
framework</a> provides ways to reuse, combine, and
compose the view code: <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Tutorial#Stash-and-templates">the
stash</a>,
<a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Partial-templates">includes</a>,
<a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Layouts">layout
templates</a>,
and <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-blocks">named content
blocks</a>.</p>

<p>This week, I&#39;ll talk about how to make reusable, configurable,
composable templates.</p>

                <p><a href="https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                </p>

        ]]></content>
        <updated>2019-07-01T00:00:00Z</updated>
        <category term="templates" />
        <category term="rendering" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/06/02/yancys-static-backend/</id>
        <title>Yancy&#39;s Static Backend</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/06/02/yancys-static-backend/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Back a few months ago I wrote about <a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/">making a website for the Yancy
CMS</a> that
included a basic Markdown page editor, <a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/">adding a documentation viewer
with the Mojolicious PODViewer
plugin</a>, and
<a href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/">deploying a static version of the site using the Mojolicious <code>export</code>
command</a>.
The site uses a SQLite database, which makes it very easy to set up and
use the Yancy editor, but very difficult to work with the data any other
way...</p>

<p>To solve this problem, many people have taken to writing their website
as a set of static files and using a static site generator to add
templates and plugins to build their website. Each page has a header
section that defines some metadata about the page, like the title or the
date it was posted. Instead of having each page be a row in a SQLite
database, each page in a static site is a file on the filesystem!</p>

<p>Yancy uses &quot;Backends&quot; to interface with a database. To make Yancy into
a static site generator, I wrote a backend that works with a flat-file
database made up of YAML and Markdown files:
<a href="https://metacpan.org/pod/Yancy::Backend::Static">Yancy::Backend::Static</a>.
I can use this new backend to make my Yancy documentation site even
easier to edit!</p>

                <p><a href="https://mojolicious.io/blog/2019/06/02/yancys-static-backend/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                </p>

        ]]></content>
        <updated>2019-06-02T00:00:00Z</updated>
        <category term="yancy" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/</id>
        <title>Testing Environment With Tmux</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The <a href="http://preaction.me/yancy">Yancy CMS</a> for the <a href="http://mojolicious.org">Mojolicious web
framework</a> currently supports three different
database systems directly (and even more through <a href="http://dbix-class.org">the DBIx::Class
ORM</a>). As a result, when doing development,
I need to have two database daemons running locally, a bunch of
different environment variables to tell the tests where those databases
are, and a web daemon to test the front-end.</p>

<p>Setting up these daemons is a pain, but I also do not want to run them
all the time (to save on my laptop&#39;s battery). To me, it&#39;s easier to run
a database daemon for a specific project than to try to manage all the
databases I might need. But that means that every time I want to do some
work on Yancy, I need to start up a bunch of things.</p>

<p>Since I do all my development in a terminal window, <a href="http://tmux.github.io">the Tmux terminal
multiplexer</a> has become an extremely useful tool.
Using a shell script and Tmux, I can run a single command to set up all
the databases, environment variables, and all the tabs I need to get to
work quickly.</p>

                <p><a href="https://mojolicious.io/blog/2019/04/15/testing-environment-with-tmux/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/testing/">testing</a>
                    <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                </p>

        ]]></content>
        <updated>2019-04-15T00:00:00Z</updated>
        <category term="development" />
        <category term="testing" />
        <category term="yancy" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/</id>
        <title>Reverse Proxy With Path</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>It&#39;s extremely common for a <a href="http://mojolicious.org">Mojolicious</a> web
application to be hosted behind some kind of HTTP proxy: A production website
usually includes <a href="https://varnish-cache.org">Varnish</a>, or
<a href="https://www.nginx.com">Nginx</a>, or a CDN (probably using Varnish or Nginx).</p>

<p>In the most common case, a web application is the entire domain, so configuring
the reverse proxy is very simple: Add the <code>-p</code> option to
<a href="https://mojolicious.org/perldoc/hypnotoad"><code>hypnotoad</code></a> or <a href="https://mojolicious.org/perldoc/Mojolicious/Command/daemon"><code>myapp.pl
daemon</code></a> command,
or set the <code>MOJO_REVERSE_PROXY</code> environment variable to a true value. <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook">See the
Mojolicious Cookbook for more
details</a>.</p>

<p>But what if my application doesn&#39;t have its own domain? How do I host a
Mojolicious application as a reverse proxy from a path in another domain?</p>

                <p><a href="https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                </p>

        ]]></content>
        <updated>2019-03-18T00:00:00Z</updated>
        <category term="deployment" />
        <category term="development" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/</id>
        <title>Mojolicious and DBIx::Class</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://mojolicious.org">Mojolicious</a> is an <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Growing#Model-View-Controller">MVC
framework</a>.
But, unlike <a href="http://www.catalystframework.org">Catalyst</a>, Mojolicious
does not provide a model API. This is a good thing: Mojolicious works
well with any model layer, including the existing models used by your
current application.</p>

<p><a href="https://metacpan.org/pod/DBIx::Class">DBIx::Class</a> is a popular model
layer for Mojolicious applications. DBIx::Class (or &quot;DBIC&quot;) is an
<a href="https://en.wikipedia.org/wiki/Object-relational_mapping">Object-Relational Mapper
(ORM)</a> to map
objects onto a relational database. This allows for a well-organized
model layer, and a standard API to access the data.</p>

<p>For those who read last month&#39;s posts on <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/">Writing Reusable
Controllers</a> and
<a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/">Writing Extensible
Controllers</a>, this
post introduces the end result of those posts: The <a href="http://metacpan.org/pod/Mojolicious::Plugin::DBIC">Mojolicious DBIC
Plugin</a>. This plugin
makes it easier to start using DBIx::Class with Mojolicious.</p>

                <p><a href="https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/controller/">controller</a>
                    <a href="https://mojolicious.io/blog/tag/dbix-class/">DBIx::Class</a>
                </p>

        ]]></content>
        <updated>2019-02-18T00:00:00Z</updated>
        <category term="development" />
        <category term="controller" />
        <category term="DBIx::Class" />
    </entry>
</feed>

