<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/</link>
        <atom:link href="https://mojolicious.io/blog/index.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.093</generator>
        <item>
            <title>Reverse Proxy With Path</title>
            <link>https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/</link>
            <guid>https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/</guid>
            <description><![CDATA[
                <p>It&#39;s extremely common for a <a href="http://mojolicious.org">Mojolicious</a> web
application to be hosted behind some kind of HTTP proxy: A production website
usually includes <a href="https://varnish-cache.org">Varnish</a>, or
<a href="https://www.nginx.com">Nginx</a>, or a CDN (probably using Varnish or Nginx).</p>

<p>In the most common case, a web application is the entire domain, so configuring
the reverse proxy is very simple: Add the <code>-p</code> option to
<a href="https://mojolicious.org/perldoc/hypnotoad"><code>hypnotoad</code></a> or <a href="https://mojolicious.org/perldoc/Mojolicious/Command/daemon"><code>myapp.pl
daemon</code></a> command,
or set the <code>MOJO_REVERSE_PROXY</code> environment variable to a true value. <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook">See the
Mojolicious Cookbook for more
details</a>.</p>

<p>But what if my application doesn&#39;t have its own domain? How do I host a
Mojolicious application as a reverse proxy from a path in another domain?</p>

                    <p><a href="https://mojolicious.io/blog/2019/03/18/reverse-proxy-with-path/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                        <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 18 Mar 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Mojolicious and DBIx::Class</title>
            <link>https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/</link>
            <guid>https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/</guid>
            <description><![CDATA[
                <p><a href="http://mojolicious.org">Mojolicious</a> is an <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Growing#Model-View-Controller">MVC
framework</a>.
But, unlike <a href="http://www.catalystframework.org">Catalyst</a>, Mojolicious
does not provide a model API. This is a good thing: Mojolicious works
well with any model layer, including the existing models used by your
current application.</p>

<p><a href="https://metacpan.org/pod/DBIx::Class">DBIx::Class</a> is a popular model
layer for Mojolicious applications. DBIx::Class (or &quot;DBIC&quot;) is an
<a href="https://en.wikipedia.org/wiki/Object-relational_mapping">Object-Relational Mapper
(ORM)</a> to map
objects onto a relational database. This allows for a well-organized
model layer, and a standard API to access the data.</p>

<p>For those who read last month&#39;s posts on <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/">Writing Reusable
Controllers</a> and
<a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/">Writing Extensible
Controllers</a>, this
post introduces the end result of those posts: The <a href="http://metacpan.org/pod/Mojolicious::Plugin::DBIC">Mojolicious DBIC
Plugin</a>. This plugin
makes it easier to start using DBIx::Class with Mojolicious.</p>

                    <p><a href="https://mojolicious.io/blog/2019/02/18/mojolicious-and-dbix-class/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/development/">development</a>
                        <a href="https://mojolicious.io/blog/tag/controller/">controller</a>
                        <a href="https://mojolicious.io/blog/tag/dbix-class/">DBIx::Class</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 18 Feb 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Writing Extensible Controllers</title>
            <link>https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/</link>
            <guid>https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/</guid>
            <description><![CDATA[
                <p>Once I have a <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers">reusable
controller</a>, how do
I extend it? Object-oriented programming gives me a couple ways of
extending a controller through code: Inheritance and composition. But,
we need to write our controller so that it&#39;s easy to inherit or compose.</p>

<h1>Don&#39;t Render, Stash</h1>

<p>First, this means we shouldn&#39;t call <a href="https://mojolicious.org/perldoc/Mojolicious/Controller#render">the <code>render</code>
method</a>
ourselves (unless we have a good reason, but we&#39;ll get to that later).
The <code>render</code> method can only ever be called once, so we should only call
it after we&#39;ve gathered all the data we want.</p>

<pre><code># This method cannot easily be used by a subclass, since it explicitly
# calls render()
sub list {
    my ( $c ) = @_;
    my $resultset_class = $c-&gt;stash( &#39;resultset&#39; );
    my $resultset = $c-&gt;schema-&gt;resultset( $resultset_class );
    $c-&gt;render(
        resultset =&gt; $resultset,
    );
}
</code></pre>

<p>So, to make sure I don&#39;t call <code>render</code> too early, and to make sure
subclasses can use the data from my superclass, I instead put all the
data directly in to the stash with the <a href="https://mojolicious.org/perldoc/Mojolicious/Controller#stash"><code>stash()</code>
method</a>.</p>

                    <p><a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/development/">development</a>
                        <a href="https://mojolicious.io/blog/tag/controller/">controller</a>
                        <a href="https://mojolicious.io/blog/tag/dbix-class/">DBIx::Class</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 28 Jan 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Writing Reusable Controllers</title>
            <link>https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/</link>
            <guid>https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/</guid>
            <description><![CDATA[
                <p>In all the web applications I&#39;ve written with
<a href="http://mojolicious.org">Mojolicious</a>, one of the most mis-used features
are controllers. Mojolicious is
a <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Growing#Model-View-Controller">Model-View-Controller</a>
framework, and the MVC pattern is intended to provide for code re-use.</p>

<p>Models can be interchangeable and used by the same controllers and
templates. With a common, consistent model API, the right controller can
list any data, update any data. If all of our models have a method named
&quot;search&quot;, I can make a single controller method that will run a search
on any of them.</p>

<p>The easiest way to demonstrate this is with
<a href="http://metacpan.org/pod/DBIx::Class">DBIx::Class</a>. DBIx::Class provides
a consistent API for a relational database. </p>

<h2>The Problem</h2>

<p>For this example, I&#39;ll use <a href="https://github.com/preaction/Mojolicious-Plugin-DBIC/tree/master/t/lib/Local">this DBIx::Class
schema</a>.
My schema has a couple tables: <code>notes</code> for storing simple notes, and
<code>events</code> for storing calendar events.</p>

                    <p><a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/development/">development</a>
                        <a href="https://mojolicious.io/blog/tag/controller/">controller</a>
                        <a href="https://mojolicious.io/blog/tag/dbix-class/">DBIx::Class</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 21 Jan 2019 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 25: Special Thanks</title>
            <link>https://mojolicious.io/blog/2018/12/25/special-thanks/</link>
            <guid>https://mojolicious.io/blog/2018/12/25/special-thanks/</guid>
            <description><![CDATA[
                <p>This advent calendar, I have special thanks to offer to all the people who helped make it possible.
I&#39;ll list them shortly, but before I do, I&#39;d like to introduce you to the newest unofficial member of the Mojolicious Core Team: Jude Carl Berger!
Jude was born on the first day of this calendar, December 1st, at 2:15 am Chicago time.
If you&#39;re looking at timestamps, yes, that&#39;s about 4 hours after the first blog post went live.</p>

<p>After a one week stay in the NICU for a relatively minor condition, he&#39;s now home with myself and his mother, my wonderful wife Carolyn, who I have to thank first.
Not too many partners would put up with someone flitting out to edit a blog post or hit &quot;publish&quot; at the right moment during this time in our lives.
And thanks for Jude.</p>

<p>Armed with that knowledge, you can surely see that even more than usual I couldn&#39;t have done this without help!
So, with no further ado, I want to thank all the authors,</p>

<ul>
<li>Boyd Duffee</li>
<li>brian d foy</li>
<li>Chris Seigman</li>
<li>Doug Bell</li>
<li>Jason Crome</li>
<li>Joe Cooper</li>
<li>Luc Didry</li>
<li>Sachin Dangol</li>
<li>Shawn Sorichetti</li>
</ul>

<p>I especially want to note that Doug Bell went above and beyond with eight (!) articles, brian d foy did more than his fair share with four, and Luc Didry and Boyd Duffee did two each!
I also want to specially mention Jason Crome who, during a tough month of his own, administered the <a href="http://advent.perldancer.org/2018">Twelve Days of Dancer</a> and contributed a cross-over article to ours as well.
The calendar is obviously nothing without the articles and so I&#39;m tremendously thankful that I had authors that I could lean on to help me when I wasn&#39;t able to fill extra space as I might have in other years.
Spectacular work, one and all!</p>

<p>We intend to publish more on this site throughout the year, including some pieces from two authors who submitted articles after all the days had been filled.
Articles had been committed to the repo, but were not yet published, which led to a small confusion in which these authors rose to meet a need they thought existed, so thank you Stefan Adams and Yuki Kimoto for stepping up!
We&#39;ll get those and other articles out to you in the coming months!</p>

<p>I want to thank Doug again for creating and maintaining <a href="http://preaction.me/statocles/">Statocles</a>, the static blog engine that powers this site.
I want to thank my employer <a href="https://www.servercentral.com/">ServerCentral</a> who not only are great to work for and support open source, but who gave me lots of time to get settled in with the newest member of my family (and a few cute gifts for him too).
I want to thank Sebastian Riedel for writing Mojolicious and for the outfit you see on Jude in the picture above (as far as I know, it is a unique piece), and the entire Mojolicious Core Team and community.</p>

<p>I want to thank Jude for being a reasonably happy newborn and sleeping for longer-than-average stretches at night.</p>

<p>Finally, I extend my warmest thanks to the doctors, nurses and staff of Northwest Community Hospital in Arlington Heights, Illinois and especially the NICU nurses who are beyond amazing.</p>

<p>Merry Christmas, Happy Holidays, Happy New Year, and Happy Perling!</p>


                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    </p>

            ]]></description>
            <pubDate>
                Tue, 25 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

