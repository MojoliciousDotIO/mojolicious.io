<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mojolicious.io</title>
        <link>https://mojolicious.io/blog/tag/advent/</link>
        <atom:link href="https://mojolicious.io/blog/tag/advent.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of mojolicious.io</description>
        <generator>Statocles 0.093</generator>
        <item>
            <title>Day 11: Who Watches The Minions</title>
            <link>https://mojolicious.io/blog/2018/12/11/who-watches-the-minions/</link>
            <guid>https://mojolicious.io/blog/2018/12/11/who-watches-the-minions/</guid>
            <description><![CDATA[
                <p>Now that I have a <a href="https://mojolicious.org/perldoc/Minion">Minion job
queue</a>, I need to take care of
it properly. Are the workers working (have they seized the means of
production)? Are jobs completing successfully? Are there any errors?
What are they?</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/11/who-watches-the-minions/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/minion/">minion</a>
                    </p>

            ]]></description>
            <pubDate>
                Tue, 11 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 10: Minion Stands Alone</title>
            <link>https://mojolicious.io/blog/2018/12/10/minion-stands-alone/</link>
            <guid>https://mojolicious.io/blog/2018/12/10/minion-stands-alone/</guid>
            <description><![CDATA[
                <p>The <a href="https://mojolicious.org/perldoc/Minion">Minion job queue</a> is an
incredibly useful tool, but sometimes I need to use it for non-web
projects. So, how can I use Minion without needing
a <a href="http://mojolicious.org">Mojolicious</a> web application?</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/10/minion-stands-alone/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/minion/">minion</a>
                    </p>

            ]]></description>
            <pubDate>
                Mon, 10 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 9: Add a theme system to your Mojolicious app</title>
            <link>https://mojolicious.io/blog/2018/12/09/add-a-theme-system-to-your-mojolicious-app/</link>
            <guid>https://mojolicious.io/blog/2018/12/09/add-a-theme-system-to-your-mojolicious-app/</guid>
            <description><![CDATA[
                <p>You wrote an awesome Mojolicious app, and people use it.
Marvellous!
But users may want to modify the theme of your app: change the logo, use another CSS framework, such sort of things.</p>

<p>Modifying the theme of a Mojolicious app is quite easy: add, modify or delete things in <code>public</code> and <code>templates</code>.
But all those direct modifications may not survive on update of the app: they will simply be erased by the files of the new version.</p>

<p>Let&#39;s see how we can provide a way to have a theme system in a Mojolicious application, that allows users to have a custom theme without pain and without risk of losing it on updates.</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/09/add-a-theme-system-to-your-mojolicious-app/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/theme/">theme</a>
                    </p>

            ]]></description>
            <pubDate>
                Sun, 09 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 8: Authenticating with LDAP</title>
            <link>https://mojolicious.io/blog/2018/12/08/authenticating-with-ldap/</link>
            <guid>https://mojolicious.io/blog/2018/12/08/authenticating-with-ldap/</guid>
            <description><![CDATA[
                <p>There are still quite a few people using LDAP in production,
but for those who are new to it,
LDAP is a directory with a tree-structure that&#39;s optimised for very fast lookups.
It used to be very common as a centralised authentication system
and if you&#39;re using Active Directory, you&#39;re using LDAP (mostly).
I wander through the wilderness of authentication,
ending with my solution on how to add LDAP authentication to your App.</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/08/authenticating-with-ldap/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/ldap/">LDAP</a>
                        <a href="https://mojolicious.io/blog/tag/authentication/">authentication</a>
                    </p>

            ]]></description>
            <pubDate>
                Sat, 08 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Day 7: MetaCPAN, Mojolicious and OpenAPI</title>
            <link>https://mojolicious.io/blog/2018/12/07/openapi/</link>
            <guid>https://mojolicious.io/blog/2018/12/07/openapi/</guid>
            <description><![CDATA[
                <p>During this years <a href="http://www.olafalders.com/2018/11/21/metahack-3-wrap-report/">meta::hack 3</a>, I was extremely fortunate to work with <a href="https://twitter.com/joelaberger">Joel Berger</a> on integrating/documenting OpenAPI with the MetaCPAN API via Mojolicious.</p>

<h2>What is it?</h2>

<p>OpenAPI is a specification for designing, documenting, validating and driving your RESTful API. It can be used to provide documentation to an existing API, or when creating a new one.</p>

<p>The OpenAPI Specification originated as the Swagger specification and was renamed to separate the API description format (OpenAPI) from the open source tooling (Swagger). The specification moved into a new GitHub repository, but did not change.</p>

<p>In the case of the MetaCPAN API, we set out to provide documentation to the existing API, but quickly moved into supporting validation to API calls as well.</p>

                    <p><a href="https://mojolicious.io/blog/2018/12/07/openapi/#section-2">Continue reading...</a></p>

                    <p>Tags:
                        <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                        <a href="https://mojolicious.io/blog/tag/development/">development</a>
                        <a href="https://mojolicious.io/blog/tag/openapi/">openapi</a>
                        <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    </p>

            ]]></description>
            <pubDate>
                Fri, 07 Dec 2018 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

