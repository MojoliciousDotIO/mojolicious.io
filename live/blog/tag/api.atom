<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/api/</id>
    <title>mojolicious.io</title>
    <updated>2017-12-22T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/api.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/api/" rel="alternate" />
    <generator version="0.088">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/</id>
        <title>Day 22: A RESTful API with OpenAPI</title>
        <author><name>Jan Henning Thorsen</name></author>
        <link href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The <a href="https://www.openapis.org/">OpenAPI</a> Specification (formerly named
Swagger) is an API description format for REST APIs. An API specification
written using the the rules set by the Open API Initiative can be used to
describe:</p>

<ul>
<li>All the available endpoints. An endpoint is a unique resource that can
access or modify a given object.</li>
<li>Input parameters, such as headers, query parameters and/or body parameters.</li>
<li>The structure of the response, including headers status codes and the body -
if any.</li>
<li>Authentication methods</li>
<li>Contact information, license, terms of use and other information</li>
</ul>

<p>This post look into how to write an API specification and how to use it
together with
<a href="https://metacpan.org/pod/Mojolicious::Plugin::OpenAPI">Mojolicious::Plugin::OpenAPI</a>
and <a href="https://metacpan.org/pod/OpenAPI::Client">OpenAPI::Client</a>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/22/day-22-how-to-build-a-public-rest-api/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                    <a href="https://mojolicious.io/blog/tag/openapi/">openapi</a>
                    <a href="https://mojolicious.io/blog/tag/rest/">rest</a>
                    <a href="https://mojolicious.io/blog/tag/swagger/">swagger</a>
                </p>

        ]]></content>
        <updated>2017-12-22T00:00:00Z</updated>
        <category term="advent" />
        <category term="api" />
        <category term="openapi" />
        <category term="rest" />
        <category term="swagger" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/</id>
        <title>Day 8: Mocking a REST API</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>One of my applications is a pure-JavaScript UI for a JSON API. This UI
is an entirely different project that communicates with a public API
using an OpenAPI specification.</p>

<p>Our public API is huge and complex: To set up the public API, I need
a database, sample data, and three other private API servers that
perform individual tasks as directed by the public API. Worse, I would
need to set up a lot of different test scenarios with different kinds of
data.</p>

<p>It would be a lot easier to set up a mock public API that I could use to
test my UI, and it turns out that Mojolicious makes this very easy.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/mocking/">mocking</a>
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                </p>

        ]]></content>
        <updated>2017-12-08T00:00:00Z</updated>
        <category term="advent" />
        <category term="mocking" />
        <category term="api" />
    </entry>
</feed>

