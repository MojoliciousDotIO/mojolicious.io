<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/rendering/</id>
    <title>mojolicious.io</title>
    <updated>2019-07-08T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/rendering.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/rendering/" rel="alternate" />
    <generator version="0.093">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2019/07/08/named-content-blocks/</id>
        <title>Named Content Blocks</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/07/08/named-content-blocks/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/">Last week I went over how to configure and include
templates</a>. This
is a pretty standard procedural solution: My current template calls
another template. But what if I need to pass additional data to my
layout template? Perhaps in addition to the content in my template,
I also have some <code>&lt;meta&gt;</code> or <code>&lt;script&gt;</code> tags to include, or some
<code>&lt;style&gt;</code> specific to this page. This would involve somehow passing data
&quot;up&quot;, or making the data available for the layout template to use.
<a href="http://mojolicious.org">Mojolicious</a> provides a way to do this: <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-blocks">named
content
blocks</a>.</p>

                <p><a href="https://mojolicious.io/blog/2019/07/08/named-content-blocks/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                </p>

        ]]></content>
        <updated>2019-07-08T00:00:00Z</updated>
        <category term="templates" />
        <category term="rendering" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/</id>
        <title>A Reusable View Layer</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>In a well-designed
<a href="https://en.wikipedia.org/wiki/Model–view–controller">Model-View-Controller</a>
web application, most of the code and the development time will be in
the model layer (which contains the <a href="https://en.wikipedia.org/wiki/Business_logic">business
logic</a>). The other two
layers are meant to be as re-usable as possible. Earlier this year
I discussed how to build a <a href="https://mojolicious.io/blog/2019/01/21/writing-reusable-controllers/">reusable controller for
Mojolicious</a>
and how to <a href="https://mojolicious.io/blog/2019/01/28/writing-extensible-controllers/">build an inheritable controller to increase code
re-use</a>.
Now, I&#39;d like to talk about how the <a href="https://mojolicious.org">Mojolicious web
framework</a> provides ways to reuse, combine, and
compose the view code: <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Tutorial#Stash-and-templates">the
stash</a>,
<a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Partial-templates">includes</a>,
<a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Layouts">layout
templates</a>,
and <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-blocks">named content
blocks</a>.</p>

<p>This week, I&#39;ll talk about how to make reusable, configurable,
composable templates.</p>

                <p><a href="https://mojolicious.io/blog/2019/07/01/a-reusable-view-layer/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                </p>

        ]]></content>
        <updated>2019-07-01T00:00:00Z</updated>
        <category term="templates" />
        <category term="rendering" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/</id>
        <title>Day 17: The Wishlist App</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>For today&#39;s article, I really wanted to demonstrate concepts using a practical example appliation.
It is possible I let the exaxmple get away from me!</p>

<p>In today&#39;s article I indend to show how to use template composition techniques to produce a wishlist app.
We will cover <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Layouts">layouts</a>, <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Partial-templates">partial templates</a>, <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-blocks">content blocks</a>.</p>

<p>The data model is admittedly rough, however I think my plan will be to make that a feature and not a bug.
Today we will example concepts mostly relating to the templates, then in tomorrows post I will migrate the model from using the simplistic persistence of <a href="https://metacpan.org/pod/DBM::Deep">DBM::Deep</a> that it uses now to <a href="https://metacpan.org/pod/Mojo::SQLite">Mojo::SQLite</a>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                    <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                    <a href="https://mojolicious.io/blog/tag/example/">example</a>
                    <a href="https://mojolicious.io/blog/tag/wishlist/">wishlist</a>
                </p>

        ]]></content>
        <updated>2017-12-17T00:00:00Z</updated>
        <category term="advent" />
        <category term="rendering" />
        <category term="templates" />
        <category term="example" />
        <category term="wishlist" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/</id>
        <title>Day 10: Give the Customer What They Want</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Writing an API can be as easy as taking the results of some database query and presenting it to the user.
A more advanced one can often present the data in one of multiple formats.
The user can then specify which format they want.</p>

<p>JSON is currently the most popular format for new APIs.
XML is another common one and was certainly king before JSON hit the scene.
An API might choose to make an HTML format of the data available, whether in some representation of the data or to render documentation about the API itself.
Of course there are many others.</p>

<p>Mojolicious believes in <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-negotiation">Content Negotiation</a>, as it is called, and supports it throughout the stack.
Mojolicious makes it easy and convenient for users to pick a format they would like.
Similarly it makes rendering the different formats easy on the site author, as you would expect.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/10/day-10-give-the-customer-what-they-want/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                </p>

        ]]></content>
        <updated>2017-12-10T00:00:00Z</updated>
        <category term="advent" />
        <category term="rendering" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/</id>
        <title>Day 7: Using Template Variants For a Beta Landing Page</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://cpantesters.org">CPAN Testers</a> is a pretty big project with a long,
storied history. At its heart is a data warehouse holding all the test reports
made by people installing CPAN modules. Around that exists an ecosystem of
tools and visualizations that use this data to provide useful insight into the
status of CPAN distributions.</p>

<p>For the <a href="http://github.com/cpan-testers/cpantesters-web">CPAN Testers webapp
project</a>, I needed a way to
show off some pre-release tools with some context about what they are and how
they might be made ready for release. I needed a &quot;beta&quot; website with a front
page that introduced the beta projects. But, I also needed the same
<a href="http://mojolicious.org">Mojolicious</a> application to serve (in the future) as a
production website. The front page of the production website would be
completely different from the front page of the beta testing website.</p>

<p>To achieve this, I used <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Template-variants">Mojolicious&#39;s template variants
feature</a>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/07/day-7-using-template-variants-for-a-beta-landing-page/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                    <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                </p>

        ]]></content>
        <updated>2017-12-07T00:00:00Z</updated>
        <category term="advent" />
        <category term="rendering" />
        <category term="templates" />
    </entry>
</feed>

