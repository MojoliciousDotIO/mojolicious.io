<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/example/</id>
    <title>mojolicious.io</title>
    <updated>2017-12-18T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/example.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/example/" rel="alternate" />
    <generator version="0.093">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2017/12/18/day-18-the-wishlist-model/</id>
        <title>Day 18: The Wishlist Model</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/18/day-18-the-wishlist-model/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/">Yesterday</a> we discussed templates features like layouts, partial templates, and content buffers.
We motivated the discussion by introducing a fully functioning example application that tracked user&#39;s Christmas wishlists.
That application did lack sophistication in the area of data storage, using <a href="https://metacpan.org/pod/DBM::Deep">DBM::Deep</a> for quickly getting a basic persistence layer.
While that worked well enough to demonstrate template functionality it was no triumph of the model layer.
Indeed some very hack techniques are used, especially in manipulating wishlist items, since there was no unique record ids.</p>

<p>Well as promised I have created a <a href="https://github.com/jberger/Wishlist">repository</a> for the application on Github.
I have also added several tags.
While development on the application may continue, those tags will remain for future readers.</p>

<p>The initial form of the application (as seen in yesterday&#39;s post) is tagged <a href="https://github.com/jberger/Wishlist/tree/blog_post/dbm_deep"><code>blog_post/dbm_deep</code></a>.
You are then invited to step through the commits <a href="https://github.com/jberger/Wishlist/compare/blog_post/dbm_deep...blog_post/full_app">from that one to <code>blog_post/full_app</code></a> to follow along as I port it from a Lite to a Full app; a practical demonstration of what we saw on <a href="https://mojolicious.io/blog/2017/12/04/day-4-dont-fear-the-full-app/">Day 4</a>.</p>

<p>This article will briefly discuss the application as it exists in the next tag, <a href="https://github.com/jberger/Wishlist/tree/blog_post/sqlite_model"><code>blog_post/sqlite_model</code></a>.
At this point I have replaced DBM::Deep with <a href="https://metacpan.org/pod/Mojo::SQLite">Mojo::SQLite</a>, written a rudimentary model layer for it, and connected the two with the application via helpers.
Let&#39;s see how that improves the application and in the meantime, get a look at idiomatic database access in Mojolicious!</p>

                <p><a href="https://mojolicious.io/blog/2017/12/18/day-18-the-wishlist-model/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/model/">model</a>
                    <a href="https://mojolicious.io/blog/tag/example/">example</a>
                    <a href="https://mojolicious.io/blog/tag/wishlist/">wishlist</a>
                </p>

        ]]></content>
        <updated>2017-12-18T00:00:00Z</updated>
        <category term="advent" />
        <category term="model" />
        <category term="example" />
        <category term="wishlist" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/</id>
        <title>Day 17: The Wishlist App</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>For today&#39;s article, I really wanted to demonstrate concepts using a practical example appliation.
It is possible I let the exaxmple get away from me!</p>

<p>In today&#39;s article I indend to show how to use template composition techniques to produce a wishlist app.
We will cover <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Layouts">layouts</a>, <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Partial-templates">partial templates</a>, <a href="http://mojolicious.org/perldoc/Mojolicious/Guides/Rendering#Content-blocks">content blocks</a>.</p>

<p>The data model is admittedly rough, however I think my plan will be to make that a feature and not a bug.
Today we will example concepts mostly relating to the templates, then in tomorrows post I will migrate the model from using the simplistic persistence of <a href="https://metacpan.org/pod/DBM::Deep">DBM::Deep</a> that it uses now to <a href="https://metacpan.org/pod/Mojo::SQLite">Mojo::SQLite</a>.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/17/day-17-the-wishlist-app/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/rendering/">rendering</a>
                    <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                    <a href="https://mojolicious.io/blog/tag/example/">example</a>
                    <a href="https://mojolicious.io/blog/tag/wishlist/">wishlist</a>
                </p>

        ]]></content>
        <updated>2017-12-17T00:00:00Z</updated>
        <category term="advent" />
        <category term="rendering" />
        <category term="templates" />
        <category term="example" />
        <category term="wishlist" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/</id>
        <title>Day 6: Adding Your Own Commands</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Everyone has written those one-off administration or check scripts.
There are probably a few cluttering your project root or bin directory right now.
Those have a problem beyond just the clutter: duplication.</p>

<p>Programmers hate duplication because of skew.
If code gets improved in one place, it is unlikely to be improved in all places, unless there is only the one.
So that script you wrote a while back, the one with the database connection you hand-rolled, is that still correct?</p>

<p>In the <a href="https://mojolicious.io/blog/2017/12/05/day-5-your-apps-built-in-commands">previous article in this series</a> I talked about the built-in commands available to your application.
The final command was <a href="http://mojolicious.org/perldoc/Mojolicious/Command/eval"><code>eval</code></a>.
I mentioned that when combined with predefined behaviors, the command could be great for administrative tasks.
That&#39;s true, but you need to know what to eval in order to do so.</p>

<p>To formalize that process, we can go one step further: defining our own commands.
By doing this your application&#39;s administative behaviors can take arguemnts and provide optional switches as well as give usage messages.
In this way these administative commands decouple themselves from knowledge of the application&#39;s internals and become useful to a broader set of users.</p>

                <p><a href="https://mojolicious.io/blog/2017/12/06/day-6-adding-your-own-commands/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/command/">command</a>
                    <a href="https://mojolicious.io/blog/tag/example/">example</a>
                </p>

        ]]></content>
        <updated>2017-12-06T00:00:00Z</updated>
        <category term="advent" />
        <category term="command" />
        <category term="example" />
    </entry>
</feed>

