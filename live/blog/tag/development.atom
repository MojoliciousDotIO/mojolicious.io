<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/development/</id>
    <title>mojolicious.io</title>
    <updated>2018-12-12T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/development.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/development/" rel="alternate" />
    <generator version="0.093">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2018/12/12/dancer-and-minion/</id>
        <title>Day 12: Using Minion in Dancer Apps</title>
        <author><name>Jason Crome</name></author>
        <link href="https://mojolicious.io/blog/2018/12/12/dancer-and-minion/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>At <code>$work</code>, we have built an API with <a href="https://metacpan.org/pod/Dancer">Dancer</a> that generates PDF documents and XML files. This API is a critical component of an insurance enrollment system: PDFs are generated to deliver to the client in a web browser
immediately, and the XML is delivered to the carrier as soon as it becomes available. Since the XML often takes a significant amount of time to generate, the job is generated in the background so as not to tie up the
application server for an extended amount of time. When this was done, a homegrown process management system was developed, and works by <code>fork()</code>ing a process, tracking its pid, and hoping we can later successfully
reap the completed process.</p>

<p>There have been several problems with this approach:
- it&#39;s fragile
- it doesn&#39;t scale
- it&#39;s too easy to screw something up as a developer</p>

<p>In 2019, we have to ramp up to take on a significantly larger workload. The current solution simply will not handle the amount of work we anticipate needing to handle. Enter <a href="https://metacpan.org/pod/Minion">Minion</a>.</p>

<p><em>Note:</em> The techniques used in this article work equally well with Dancer or <a href="https://metacpan.org/pod/Dancer2">Dancer2</a>.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/12/dancer-and-minion/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/dancer/">dancer</a>
                    <a href="https://mojolicious.io/blog/tag/minion/">minion</a>
                </p>

        ]]></content>
        <updated>2018-12-12T00:00:00Z</updated>
        <category term="advent" />
        <category term="development" />
        <category term="dancer" />
        <category term="minion" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/07/openapi/</id>
        <title>Day 7: MetaCPAN, Mojolicious and OpenAPI</title>
        <author><name>Shawn Sorichetti</name></author>
        <link href="https://mojolicious.io/blog/2018/12/07/openapi/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>During this years <a href="http://www.olafalders.com/2018/11/21/metahack-3-wrap-report/">meta::hack 3</a>, I was extremely fortunate to work with <a href="https://twitter.com/joelaberger">Joel Berger</a> on integrating/documenting OpenAPI with the MetaCPAN API via Mojolicious.</p>

<h2>What is it?</h2>

<p>OpenAPI is a specification for designing, documenting, validating and driving your RESTful API. It can be used to provide documentation to an existing API, or when creating a new one.</p>

<p>The OpenAPI Specification originated as the Swagger specification and was renamed to separate the API description format (OpenAPI) from the open source tooling (Swagger). The specification moved into a new GitHub repository, but did not change.</p>

<p>In the case of the MetaCPAN API, we set out to provide documentation to the existing API, but quickly moved into supporting validation to API calls as well.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/07/openapi/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/openapi/">openapi</a>
                    <a href="https://mojolicious.io/blog/tag/api/">api</a>
                </p>

        ]]></content>
        <updated>2018-12-07T00:00:00Z</updated>
        <category term="advent" />
        <category term="development" />
        <category term="openapi" />
        <category term="api" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/02/automatic-reload-for-rapid-development/</id>
        <title>Day 2: Automatic Reload for Rapid Development</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2018/12/02/automatic-reload-for-rapid-development/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Developing webapps with <a href="http://mojolicious.org">Mojolicious</a> is a lot of fun!
Using <a href="https://mojolicious.org/perldoc/morbo">the <code>morbo</code> server</a> for
development, every change to my webapp causes a restart to load my changes.
This way the next request I make has all my new code!</p>

<p>So, I change my code, the webapp restarts, and I go back to my browser window.
Wait... Where&#39;s my new code? Why isn&#39;t the bug fixed? Did... Did I forget to
reload my browser window again? Ugh! Of course!</p>

<p>Does this happen to you? Probably not. But, it&#39;s still annoying to reload the
browser window after every backend code change. It&#39;d be nice if my browser
window automatically reloaded every time the web server restarted!</p>

                <p><a href="https://mojolicious.io/blog/2018/12/02/automatic-reload-for-rapid-development/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                </p>

        ]]></content>
        <updated>2018-12-02T00:00:00Z</updated>
        <category term="advent" />
        <category term="development" />
    </entry>
</feed>

