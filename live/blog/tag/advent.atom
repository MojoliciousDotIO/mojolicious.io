<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/advent/</id>
    <title>mojolicious.io</title>
    <updated>2018-12-19T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/advent.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/advent/" rel="alternate" />
    <generator version="0.093">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2018/12/19/you-only-export-twice/</id>
        <title>Day 19: You Only Export Twice</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>With my Yancy documentation site built, with <a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy">a custom landing
page</a> and <a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod">a POD
viewer</a>, I just need to deploy the site. I
could deploy the site using <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook#Hypnotoad">hypnotoad, Mojolicious&#39;s preforking server with
hot
deployment</a>,
but that would require me to have a server and keep it online. It&#39;d be a lot
better if I could just deploy a <a href="https://pages.github.com">static website to
Github</a> like all the cool people are doing.</p>

<p>But to do that, I&#39;d need to take my dynamic website and turn it into a static
one, and that&#39;s impossible! Or is it? Why am I asking me, when I&#39;m the one who
wrote a way to do it: The <a href="https://metacpan.org/pod/Mojolicious::Command::export">Mojolicious export
command</a>.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/command/">command</a>
                    <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                </p>

        ]]></content>
        <updated>2018-12-19T00:00:00Z</updated>
        <category term="advent" />
        <category term="command" />
        <category term="yancy" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/</id>
        <title>Day 18: A View To A POD</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>In order for Yancy to have a good documentation site, it needs to
actually render the documentation. To render Perl documentation in
<a href="http://mojolicious.org">Mojolicious</a>, I can use the
<a href="http://metacpan.org/pod/Mojolicious::Plugin::PODViewer">PODViewer</a>
plugin (a fork of the now-deprecated
<a href="http://mojolicious.org/perldoc/Mojolicious/Plugin/PODRenderer">PODRenderer</a>
plugin).</p>

                <p><a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/documentation/">documentation</a>
                    <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                </p>

        ]]></content>
        <updated>2018-12-18T00:00:00Z</updated>
        <category term="advent" />
        <category term="documentation" />
        <category term="yancy" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/</id>
        <title>Day 17: A Website For Yancy</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>For this year, I decided that Yancy needed a website. Rather than build
a website with a <a href="http://preaction.me/statocles">static site generator like
Statocles</a>, which is so popular these
days, I decided to do something wild and unpredictable: A dynamic
website! Lucky for me, I have the perfect project to easily build
a dynamic website: Yancy!</p>

                <p><a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                </p>

        ]]></content>
        <updated>2018-12-17T00:00:00Z</updated>
        <category term="advent" />
        <category term="yancy" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/16/browser-diet/</id>
        <title>Day 16: A pre-Christmas Diet for Mojolicious - A Children&#39;s Story</title>
        <author><name>Boyd Duffee</name></author>
        <link href="https://mojolicious.io/blog/2018/12/16/browser-diet/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>You&#39;ve just read
<a href="https://browserdiet.com">How to lose Weight in the Browser</a>
and you want to know to slim down your Mojo app.
Part of that process is preventing the browser from requesting files
that hardly change.
I spent a well-caffeinated afternoon trying to do that with
Mojolicious.
I&#39;ve been &#39;round the houses, and <em>spoiler alert</em> I didn&#39;t find
the answer until the very end, kind of like your favourite Christmas
animated special with a small woodland creature narrating
&quot;The Gruffalo&#39;s HTTP header&quot;.</p>

<h1>A Children&#39;s Story</h1>

<p>Our beloved small woodland creature needed to display a web calendar
with forest events pulled from a database.
Perl could get the event data and package it as a JSON feed.
Mojolicious could prepare the webpages with the correct JSON feed for each user.
With some JavaScript libraries to display the web calendar,
all would be well in the forest.</p>

<p>Everything except the JavaScript libraries are lightweight.
And everyone knows a page reload goes <em>so</em> much faster if it doesn&#39;t have to download the
JavaScript every time.  Those libraries won&#39;t change for months!
If only the client browser knew that it could use the file that it had downloaded
last time.</p>

<p>The secret, of course, is to set the <code>Cache-Control</code> field of the HTTP header, but <em>how</em>?</p>

                <p><a href="https://mojolicious.io/blog/2018/12/16/browser-diet/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/caching/">caching</a>
                    <a href="https://mojolicious.io/blog/tag/headers/">headers</a>
                </p>

        ]]></content>
        <updated>2018-12-16T00:00:00Z</updated>
        <category term="advent" />
        <category term="caching" />
        <category term="headers" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/15/practical-web-content-munging/</id>
        <title>Day 15: Practical Web Content Munging</title>
        <author><name>Joe Cooper</name></author>
        <link href="https://mojolicious.io/blog/2018/12/15/practical-web-content-munging/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Following brian d foy&#39;s great <a href="https://mojolicious.io/blog/2018/12/05/compound-selectors/">write-up of using Mojo::DOM selectors from Day 5</a>, I thought it&#39;d be fun to talk about some website migration scripts I recently built using <a href="https://mojolicious.org/perldoc/Mojo/UserAgent">Mojo::UserAgent</a> and <a href="https://mojolicious.org/perldoc/Mojo/DOM">Mojo::DOM</a>, in order to show some basic practical usage of these modules. I&#39;ve never really used Mojo before, but I recently needed to migrate a website that hasn&#39;t had a redesign in about 15 years, and it seemed like a great fit for my content mangling needs. In the past I would have used regexes, and probably would have spent at least as much time manually massaging the input or output into the right shape as I spent writing code. Mojo::DOM made it easy for me, a Mojolicious beginner, to get the results I wanted really quickly.</p>

<h2>From Static Site to Static Site Generator</h2>

<p>The problem I set out to solve was taking an old static website that was once hosted on SourceForge.net and migrating it to an exciting new...um...static website. But, this time, it&#39;ll be a modern take on a static website. Instead of editing HTML by hand and using home-built page munging scripts that would do things like insert news items or changelog entries at the top of the content div using regexes, I&#39;ll be using a modern static website generator. There are several to choose from, including the well-known Jekyll, which is written in Ruby, Hugo, built with Go, and Statocles, which is in Perl and runs this site. For my project, I chose <a href="https://gohugo.io">Hugo</a>, for its speed and maturity.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/15/practical-web-content-munging/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/css/">css</a>
                    <a href="https://mojolicious.io/blog/tag/html/">html</a>
                </p>

        ]]></content>
        <updated>2018-12-15T00:00:00Z</updated>
        <category term="advent" />
        <category term="css" />
        <category term="html" />
    </entry>
</feed>

