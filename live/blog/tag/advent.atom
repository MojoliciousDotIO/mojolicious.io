<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/advent/</id>
    <title>mojolicious.io</title>
    <updated>2018-12-23T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/advent.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/advent/" rel="alternate" />
    <generator version="0.093">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2018/12/23/mojolicious-and-angular/</id>
        <title>Day 23: Mojolicious and Angular</title>
        <author><name>Sachin Dangol</name></author>
        <link href="https://mojolicious.io/blog/2018/12/23/mojolicious-and-angular/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="https://angular.io/">Angular</a> is one of the most popular front-end web application frameworks, helping you build modern applications for the web, mobile, or desktop.
<a href="https://mojolicious.org/">Mojolicious</a> is a next generation web framework for the Perl programming language.
Mojolicious and Angular together can certainly build a next generation web application.</p>

<p>At work, we have been using these two to build a very responsive, scalable and fantastic web apps.
Mojolicious as a backend gives a lot of fun to work stuffs like <a href="https://mojolicious.org/perldoc/Minion">Minion</a>, <a href="https://mojolicious.org/perldoc/Mojo/DOM">Mojo::DOM</a>, <a href="https://mojolicious.org/perldoc/Test/Mojo">Test::Mojo</a>.
It has many plugins, including easy implementation of <a href="https://metacpan.org/pod/Mojolicious::Plugin::OpenAPI">OpenAPI</a>, <a href="https://metacpan.org/pod/Mojolicious::Plugin::OAuth2">OAuth</a>, utility modules and of many others on CPAN.</p>

<p>One of the reasons you want to have this kind of web development set up is that front-end Angular developers and backend Mojolicious developers can work independently.</p>

<p>Angular is backend agnostic. Node.js Express is often used as backend for Angular, but we love Perl and Mojolicious.</p>

<p>We will see how these two can be married to make a web application today.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/23/mojolicious-and-angular/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/angular/">Angular</a>
                    <a href="https://mojolicious.io/blog/tag/javascript/">JavaScript</a>
                </p>

        ]]></content>
        <updated>2018-12-23T00:00:00Z</updated>
        <category term="advent" />
        <category term="Angular" />
        <category term="JavaScript" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/22/use-carton-for-your-mojolicious-app-deployment/</id>
        <title>Day 22: Use Carton for your Mojolicious app deployment</title>
        <author><name>Luc Didry</name></author>
        <link href="https://mojolicious.io/blog/2018/12/22/use-carton-for-your-mojolicious-app-deployment/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>You have a lovely Mojolicious app, it’s time to deploy it!</p>

<p>But… it’s not working on the production server! What is going on? Oh no, the modules you rely on are not on the same version that on your development server. What can you do?</p>

                <p><a href="https://mojolicious.io/blog/2018/12/22/use-carton-for-your-mojolicious-app-deployment/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/deployment/">deployment</a>
                    <a href="https://mojolicious.io/blog/tag/carton/">carton</a>
                </p>

        ]]></content>
        <updated>2018-12-22T00:00:00Z</updated>
        <category term="advent" />
        <category term="deployment" />
        <category term="carton" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/21/a-little-christmas-template-cooking/</id>
        <title>Day 21: A Little Christmas Template Cooking</title>
        <author><name>brian d foy</name></author>
        <link href="https://mojolicious.io/blog/2018/12/21/a-little-christmas-template-cooking/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>The Advent Calendar has shown you many great ways to use Mojolicious, and since you already have Mojo installed you can use it for things besides web processing. Today&#39;s recipe uses The templating rendering engine for something other than web responses.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/21/a-little-christmas-template-cooking/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/templates/">templates</a>
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                </p>

        ]]></content>
        <updated>2018-12-21T00:00:00Z</updated>
        <category term="templates" />
        <category term="advent" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/20/testing-dancer/</id>
        <title>Day 20: Testing Dancer</title>
        <author><name>Joel Berger</name></author>
        <link href="https://mojolicious.io/blog/2018/12/20/testing-dancer/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Authors of Dancer (and other) PSGI applications are probably accustomed to <a href="https://metacpan.org/pod/distribution/Dancer2/lib/Dancer2/Manual.pod#TESTING">testing</a> with <a href="https://metacpan.org/pod/Plack::Test">Plack::Test</a>, and while that is a venerated option, it is pretty bare-bones.</p>

<p>During advent last year, I wrote about <a href="https://mojolicious.org/perldoc/Test/Mojo">Test::Mojo</a>, showing the many easy and (dare I say) fun ways that you can use it to test your Mojolicious applications.
If you missed it, go <a href="https://mojolicious.io/blog/2017/12/09/day-9-the-best-way-to-test/">check it out</a>.</p>

<p>I expect there are at least a few of you out there who read that and think, &quot;I&#39;d love to use that, but I don&#39;t use Mojolicious!&quot;; well, you&#39;re in luck!
With just a little role to bridge the gap, you can use Test::Mojo to test your PSGI applications too!</p>

                <p><a href="https://mojolicious.io/blog/2018/12/20/testing-dancer/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/testing/">testing</a>
                    <a href="https://mojolicious.io/blog/tag/psgi/">psgi</a>
                </p>

        ]]></content>
        <updated>2018-12-20T00:00:00Z</updated>
        <category term="advent" />
        <category term="testing" />
        <category term="psgi" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/19/you-only-export-twice/</id>
        <title>Day 19: You Only Export Twice</title>
        <author><name>Doug Bell</name></author>
        <link href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>With my Yancy documentation site built, with <a href="https://mojolicious.io/blog/2018/12/17/a-website-for-yancy">a custom landing
page</a> and <a href="https://mojolicious.io/blog/2018/12/18/a-view-to-a-pod">a POD
viewer</a>, I just need to deploy the site. I
could deploy the site using <a href="https://mojolicious.org/perldoc/Mojolicious/Guides/Cookbook#Hypnotoad">hypnotoad, Mojolicious&#39;s preforking server with
hot
deployment</a>,
but that would require me to have a server and keep it online. It&#39;d be a lot
better if I could just deploy a <a href="https://pages.github.com">static website to
Github</a> like all the cool people are doing.</p>

<p>But to do that, I&#39;d need to take my dynamic website and turn it into a static
one, and that&#39;s impossible! Or is it? Why am I asking me, when I&#39;m the one who
wrote a way to do it: The <a href="https://metacpan.org/pod/Mojolicious::Command::export">Mojolicious export
command</a>.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/19/you-only-export-twice/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/command/">command</a>
                    <a href="https://mojolicious.io/blog/tag/yancy/">yancy</a>
                </p>

        ]]></content>
        <updated>2018-12-19T00:00:00Z</updated>
        <category term="advent" />
        <category term="command" />
        <category term="yancy" />
    </entry>
</feed>

