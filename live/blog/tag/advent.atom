<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mojolicious.io/blog/tag/advent/</id>
    <title>mojolicious.io</title>
    <updated>2018-12-16T00:00:00Z</updated>
    <link href="https://mojolicious.io/blog/tag/advent.atom" rel="self" />
    <link href="https://mojolicious.io/blog/tag/advent/" rel="alternate" />
    <generator version="0.093">Statocles</generator>

    <entry>
        <id>https://mojolicious.io/blog/2018/12/16/browser-diet/</id>
        <title>Day 16: A pre-Christmas Diet for Mojolicious - A Children&#39;s Story</title>
        <author><name>Boyd Duffee</name></author>
        <link href="https://mojolicious.io/blog/2018/12/16/browser-diet/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>You&#39;ve just read
<a href="https://browserdiet.com">How to lose Weight in the Browser</a>
and you want to know to slim down your Mojo app.
Part of that process is preventing the browser from requesting files
that hardly change.
I spent a well-caffeinated afternoon trying to do that with
Mojolicious.
I&#39;ve been &#39;round the houses, and <em>spoiler alert</em> I didn&#39;t find
the answer until the very end, kind of like your favourite Christmas
animated special with a small woodland creature narrating
&quot;The Gruffalo&#39;s HTTP header&quot;.</p>

<h1>A Children&#39;s Story</h1>

<p>Our beloved small woodland creature needed to display a web calendar
with forest events pulled from a database.
Perl could get the event data and package it as a JSON feed.
Mojolicious could prepare the webpages with the correct JSON feed for each user.
With some JavaScript libraries to display the web calendar,
all would be well in the forest.</p>

<p>Everything except the JavaScript libraries are lightweight.
And everyone knows a page reload goes <em>so</em> much faster if it doesn&#39;t have to download the
JavaScript every time.  Those libraries won&#39;t change for months!
If only the client browser knew that it could use the file that it had downloaded
last time.</p>

<p>The secret, of course, is to set the <code>Cache-Control</code> field of the HTTP header, but <em>how</em>?</p>

                <p><a href="https://mojolicious.io/blog/2018/12/16/browser-diet/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/caching/">caching</a>
                    <a href="https://mojolicious.io/blog/tag/headers/">headers</a>
                </p>

        ]]></content>
        <updated>2018-12-16T00:00:00Z</updated>
        <category term="advent" />
        <category term="caching" />
        <category term="headers" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/15/practical-web-content-munging/</id>
        <title>Day 15: Practical Web Content Munging</title>
        <author><name>Joe Cooper</name></author>
        <link href="https://mojolicious.io/blog/2018/12/15/practical-web-content-munging/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Following brian d foy&#39;s great <a href="https://mojolicious.io/blog/2018/12/05/compound-selectors/">write-up of using Mojo::DOM selectors from Day 5</a>, I thought it&#39;d be fun to talk about some website migration scripts I recently built using <a href="https://mojolicious.org/perldoc/Mojo/UserAgent">Mojo::UserAgent</a> and <a href="https://mojolicious.org/perldoc/Mojo/DOM">Mojo::DOM</a>, in order to show some basic practical usage of these modules. I&#39;ve never really used Mojo before, but I recently needed to migrate a website that hasn&#39;t had a redesign in about 15 years, and it seemed like a great fit for my content mangling needs. In the past I would have used regexes, and probably would have spent at least as much time manually massaging the input or output into the right shape as I spent writing code. Mojo::DOM made it easy for me, a Mojolicious beginner, to get the results I wanted really quickly.</p>

<h2>From Static Site to Static Site Generator</h2>

<p>The problem I set out to solve was taking an old static website that was once hosted on SourceForge.net and migrating it to an exciting new...um...static website. But, this time, it&#39;ll be a modern take on a static website. Instead of editing HTML by hand and using home-built page munging scripts that would do things like insert news items or changelog entries at the top of the content div using regexes, I&#39;ll be using a modern static website generator. There are several to choose from, including the well-known Jekyll, which is written in Ruby, Hugo, built with Go, and Statocles, which is in Perl and runs this site. For my project, I chose <a href="https://gohugo.io">Hugo</a>, for its speed and maturity.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/15/practical-web-content-munging/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/css/">css</a>
                    <a href="https://mojolicious.io/blog/tag/html/">html</a>
                </p>

        ]]></content>
        <updated>2018-12-15T00:00:00Z</updated>
        <category term="advent" />
        <category term="css" />
        <category term="html" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/14/a-practical-example-of-mojo-dom/</id>
        <title>Day 14: A Practical Example of Mojo::DOM</title>
        <author><name>maschine</name></author>
        <link href="https://mojolicious.io/blog/2018/12/14/a-practical-example-of-mojo-dom/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>With recent versions of Mojolicious, <a href="https://mojolicious.org/perldoc/Mojo/DOM">Mojo::DOM</a> gained a lot of power that I have been excited to try, but haven&#39;t had the time for.  Recently, I had a problem at my real job (in Engineering, Procurement, and Construction, or EPC for short) that I solved with Mojo::DOM (and other parts of Mojolicious) in a very short time â€“ including learning how to use Mojo::DOM, which I had never done before.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/14/a-practical-example-of-mojo-dom/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/xml/">xml</a>
                    <a href="https://mojolicious.io/blog/tag/non-web/">non-web</a>
                </p>

        ]]></content>
        <updated>2018-12-14T00:00:00Z</updated>
        <category term="advent" />
        <category term="xml" />
        <category term="non-web" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/13/taking-on-roles/</id>
        <title>Day 13: Taking on Roles</title>
        <author><name>brian d foy</name></author>
        <link href="https://mojolicious.io/blog/2018/12/13/taking-on-roles/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>In my previous Advent article, I created <a href="https://mojolicious.io/blog/2018/12/03/higher-order-promises/">higher-order promises</a> and showed you how to use them. I didn&#39;t show you the magic of how they work. Now I&#39;ll develop another example but from the other direction.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/13/taking-on-roles/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/roles/">roles</a>
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                </p>

        ]]></content>
        <updated>2018-12-13T00:00:00Z</updated>
        <category term="roles" />
        <category term="advent" />
    </entry>
    <entry>
        <id>https://mojolicious.io/blog/2018/12/12/dancer-and-minion/</id>
        <title>Day 12: Using Minion in Dancer Apps</title>
        <author><name>Jason Crome</name></author>
        <link href="https://mojolicious.io/blog/2018/12/12/dancer-and-minion/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>At <code>$work</code>, we have built an API with <a href="https://metacpan.org/pod/Dancer">Dancer</a> that generates PDF documents and XML files. This API is a critical component of an insurance enrollment system: PDFs are generated to deliver to the client in a web browser
immediately, and the XML is delivered to the carrier as soon as it becomes available. Since the XML often takes a significant amount of time to generate, the job is generated in the background so as not to tie up the
application server for an extended amount of time. When this was done, a homegrown process management system was developed, and works by <code>fork()</code>ing a process, tracking its pid, and hoping we can later successfully
reap the completed process.</p>

<p>There have been several problems with this approach:
- it&#39;s fragile
- it doesn&#39;t scale
- it&#39;s too easy to screw something up as a developer</p>

<p>In 2019, we have to ramp up to take on a significantly larger workload. The current solution simply will not handle the amount of work we anticipate needing to handle. Enter <a href="https://metacpan.org/pod/Minion">Minion</a>.</p>

<p><em>Note:</em> The techniques used in this article work equally well with Dancer or <a href="https://metacpan.org/pod/Dancer2">Dancer2</a>.</p>

                <p><a href="https://mojolicious.io/blog/2018/12/12/dancer-and-minion/#section-2">Continue reading...</a></p>

                <p>Tags:
                    <a href="https://mojolicious.io/blog/tag/advent/">advent</a>
                    <a href="https://mojolicious.io/blog/tag/development/">development</a>
                    <a href="https://mojolicious.io/blog/tag/dancer/">dancer</a>
                    <a href="https://mojolicious.io/blog/tag/minion/">minion</a>
                </p>

        ]]></content>
        <updated>2018-12-12T00:00:00Z</updated>
        <category term="advent" />
        <category term="development" />
        <category term="dancer" />
        <category term="minion" />
    </entry>
</feed>

